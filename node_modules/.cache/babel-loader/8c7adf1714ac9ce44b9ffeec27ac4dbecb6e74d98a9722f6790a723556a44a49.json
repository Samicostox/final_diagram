{"ast":null,"code":"import * as _ from 'lodash';\nimport { BaseObserver } from '../core/BaseObserver';\nexport class StateMachine extends BaseObserver {\n  constructor(engine) {\n    super();\n    this.engine = engine;\n    this.stateStack = [];\n  }\n  getCurrentState() {\n    return this.currentState;\n  }\n  pushState(state) {\n    this.stateStack.push(state);\n    this.setState(state);\n  }\n  popState() {\n    this.stateStack.pop();\n    this.setState(_.last(this.stateStack));\n  }\n  setState(state) {\n    state.setEngine(this.engine);\n    // if no state object, get the initial state\n    if (this.currentState) {\n      this.currentState.deactivated(state);\n    }\n    const old = this.currentState;\n    this.currentState = state;\n    if (this.currentState) {\n      this.currentState.activated(old);\n      this.fireEvent({\n        newState: state\n      }, 'stateChanged');\n    }\n  }\n}","map":{"version":3,"names":["_","BaseObserver","StateMachine","constructor","engine","stateStack","getCurrentState","currentState","pushState","state","push","setState","popState","pop","last","setEngine","deactivated","old","activated","fireEvent","newState"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-canvas-core\\src\\core-state\\StateMachine.ts"],"sourcesContent":["import { State } from './State';\nimport * as _ from 'lodash';\nimport { CanvasEngine } from '../CanvasEngine';\nimport { BaseEvent, BaseListener, BaseObserver } from '../core/BaseObserver';\n\nexport interface StateMachineListener extends BaseListener {\n\tstateChanged?: (event: BaseEvent & { newState: State }) => any;\n}\n\nexport class StateMachine extends BaseObserver<StateMachineListener> {\n\tprotected currentState: State;\n\tprotected stateStack: State[];\n\tprotected engine: CanvasEngine;\n\n\tconstructor(engine: CanvasEngine) {\n\t\tsuper();\n\t\tthis.engine = engine;\n\t\tthis.stateStack = [];\n\t}\n\n\tgetCurrentState() {\n\t\treturn this.currentState;\n\t}\n\n\tpushState(state: State) {\n\t\tthis.stateStack.push(state);\n\t\tthis.setState(state);\n\t}\n\n\tpopState() {\n\t\tthis.stateStack.pop();\n\t\tthis.setState(_.last(this.stateStack));\n\t}\n\n\tsetState(state: State) {\n\t\tstate.setEngine(this.engine);\n\n\t\t// if no state object, get the initial state\n\t\tif (this.currentState) {\n\t\t\tthis.currentState.deactivated(state);\n\t\t}\n\t\tconst old = this.currentState;\n\t\tthis.currentState = state;\n\t\tif (this.currentState) {\n\t\t\tthis.currentState.activated(old);\n\t\t\tthis.fireEvent<'stateChanged'>(\n\t\t\t\t{\n\t\t\t\t\tnewState: state\n\t\t\t\t},\n\t\t\t\t'stateChanged'\n\t\t\t);\n\t\t}\n\t}\n}\n"],"mappings":"AACA,OAAO,KAAKA,CAAC,MAAM,QAAQ;AAE3B,SAAkCC,YAAY,QAAQ,sBAAsB;AAM5E,OAAM,MAAOC,YAAa,SAAQD,YAAkC;EAKnEE,YAAYC,MAAoB;IAC/B,KAAK,EAAE;IACP,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,UAAU,GAAG,EAAE;EACrB;EAEAC,eAAeA,CAAA;IACd,OAAO,IAAI,CAACC,YAAY;EACzB;EAEAC,SAASA,CAACC,KAAY;IACrB,IAAI,CAACJ,UAAU,CAACK,IAAI,CAACD,KAAK,CAAC;IAC3B,IAAI,CAACE,QAAQ,CAACF,KAAK,CAAC;EACrB;EAEAG,QAAQA,CAAA;IACP,IAAI,CAACP,UAAU,CAACQ,GAAG,EAAE;IACrB,IAAI,CAACF,QAAQ,CAACX,CAAC,CAACc,IAAI,CAAC,IAAI,CAACT,UAAU,CAAC,CAAC;EACvC;EAEAM,QAAQA,CAACF,KAAY;IACpBA,KAAK,CAACM,SAAS,CAAC,IAAI,CAACX,MAAM,CAAC;IAE5B;IACA,IAAI,IAAI,CAACG,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,CAACS,WAAW,CAACP,KAAK,CAAC;;IAErC,MAAMQ,GAAG,GAAG,IAAI,CAACV,YAAY;IAC7B,IAAI,CAACA,YAAY,GAAGE,KAAK;IACzB,IAAI,IAAI,CAACF,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,CAACW,SAAS,CAACD,GAAG,CAAC;MAChC,IAAI,CAACE,SAAS,CACb;QACCC,QAAQ,EAAEX;OACV,EACD,cAAc,CACd;;EAEH"},"metadata":{},"sourceType":"module","externalDependencies":[]}