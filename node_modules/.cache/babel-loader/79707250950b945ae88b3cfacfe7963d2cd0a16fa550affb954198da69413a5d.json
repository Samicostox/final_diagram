{"ast":null,"code":"/**\r\n * @namespace PF.Heuristic\r\n * @description A collection of heuristic functions.\r\n */\nmodule.exports = {\n  /**\r\n   * Manhattan distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} dx + dy\r\n   */\n  manhattan: function (dx, dy) {\n    return dx + dy;\n  },\n  /**\r\n   * Euclidean distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy)\r\n   */\n  euclidean: function (dx, dy) {\n    return Math.sqrt(dx * dx + dy * dy);\n  },\n  /**\r\n   * Octile distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy) for grids\r\n   */\n  octile: function (dx, dy) {\n    var F = Math.SQRT2 - 1;\n    return dx < dy ? F * dx + dy : F * dy + dx;\n  },\n  /**\r\n   * Chebyshev distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} max(dx, dy)\r\n   */\n  chebyshev: function (dx, dy) {\n    return Math.max(dx, dy);\n  }\n};","map":{"version":3,"names":["module","exports","manhattan","dx","dy","euclidean","Math","sqrt","octile","F","SQRT2","chebyshev","max"],"sources":["C:/Users/samir/Diagram gen/diagram-sami/node_modules/pathfinding/src/core/Heuristic.js"],"sourcesContent":["/**\r\n * @namespace PF.Heuristic\r\n * @description A collection of heuristic functions.\r\n */\r\nmodule.exports = {\r\n\r\n  /**\r\n   * Manhattan distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} dx + dy\r\n   */\r\n  manhattan: function(dx, dy) {\r\n      return dx + dy;\r\n  },\r\n\r\n  /**\r\n   * Euclidean distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy)\r\n   */\r\n  euclidean: function(dx, dy) {\r\n      return Math.sqrt(dx * dx + dy * dy);\r\n  },\r\n\r\n  /**\r\n   * Octile distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy) for grids\r\n   */\r\n  octile: function(dx, dy) {\r\n      var F = Math.SQRT2 - 1;\r\n      return (dx < dy) ? F * dx + dy : F * dy + dx;\r\n  },\r\n\r\n  /**\r\n   * Chebyshev distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} max(dx, dy)\r\n   */\r\n  chebyshev: function(dx, dy) {\r\n      return Math.max(dx, dy);\r\n  }\r\n\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAG;EAEf;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE,SAAAA,CAASC,EAAE,EAAEC,EAAE,EAAE;IACxB,OAAOD,EAAE,GAAGC,EAAE;EAClB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE,SAAAA,CAASF,EAAE,EAAEC,EAAE,EAAE;IACxB,OAAOE,IAAI,CAACC,IAAI,CAACJ,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;EACvC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEI,MAAM,EAAE,SAAAA,CAASL,EAAE,EAAEC,EAAE,EAAE;IACrB,IAAIK,CAAC,GAAGH,IAAI,CAACI,KAAK,GAAG,CAAC;IACtB,OAAQP,EAAE,GAAGC,EAAE,GAAIK,CAAC,GAAGN,EAAE,GAAGC,EAAE,GAAGK,CAAC,GAAGL,EAAE,GAAGD,EAAE;EAChD,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEQ,SAAS,EAAE,SAAAA,CAASR,EAAE,EAAEC,EAAE,EAAE;IACxB,OAAOE,IAAI,CAACM,GAAG,CAACT,EAAE,EAAEC,EAAE,CAAC;EAC3B;AAEF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}