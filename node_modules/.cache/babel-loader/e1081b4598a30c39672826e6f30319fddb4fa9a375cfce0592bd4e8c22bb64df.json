{"ast":null,"code":"import { BaseModel } from '../../core-models/BaseModel';\nimport * as _ from 'lodash';\nexport class LayerModel extends BaseModel {\n  constructor(options = {}) {\n    super(options);\n    this.models = {};\n    this.repaintEnabled = true;\n  }\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.isSvg = !!event.data.isSvg;\n    this.options.transformed = !!event.data.transformed;\n    _.forEach(event.data.models, model => {\n      const modelOb = this.getChildModelFactoryBank(event.engine).getFactory(model.type).generateModel({\n        initialConfig: model\n      });\n      modelOb.deserialize(Object.assign(Object.assign({}, event), {\n        data: model\n      }));\n      this.addModel(modelOb);\n    });\n  }\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      isSvg: this.options.isSvg,\n      transformed: this.options.transformed,\n      models: _.mapValues(this.models, model => {\n        return model.serialize();\n      })\n    });\n  }\n  isRepaintEnabled() {\n    return this.repaintEnabled;\n  }\n  allowRepaint(allow = true) {\n    this.repaintEnabled = allow;\n  }\n  remove() {\n    if (this.parent) {\n      this.parent.removeLayer(this);\n    }\n    super.remove();\n  }\n  addModel(model) {\n    model.setParent(this);\n    this.models[model.getID()] = model;\n  }\n  getSelectionEntities() {\n    return _.flatMap(this.models, model => {\n      return model.getSelectionEntities();\n    });\n  }\n  getModels() {\n    return this.models;\n  }\n  getModel(id) {\n    return this.models[id];\n  }\n  removeModel(id) {\n    const _id = typeof id === 'string' ? id : id.getID();\n    if (this.models[_id]) {\n      delete this.models[_id];\n      return true;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["BaseModel","_","LayerModel","constructor","options","models","repaintEnabled","deserialize","event","isSvg","data","transformed","forEach","model","modelOb","getChildModelFactoryBank","engine","getFactory","type","generateModel","initialConfig","Object","assign","addModel","serialize","mapValues","isRepaintEnabled","allowRepaint","allow","remove","parent","removeLayer","setParent","getID","getSelectionEntities","flatMap","getModels","getModel","id","removeModel","_id"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-canvas-core\\src\\entities\\layer\\LayerModel.ts"],"sourcesContent":["import { BaseModel, BaseModelGenerics, BaseModelOptions } from '../../core-models/BaseModel';\nimport { CanvasModel } from '../canvas/CanvasModel';\nimport * as _ from 'lodash';\nimport { CanvasEngine } from '../../CanvasEngine';\nimport { FactoryBank } from '../../core/FactoryBank';\nimport { AbstractModelFactory } from '../../core/AbstractModelFactory';\nimport { DeserializeEvent } from '../../core-models/BaseEntity';\n\nexport interface LayerModelOptions extends BaseModelOptions {\n\tisSvg?: boolean;\n\ttransformed?: boolean;\n}\n\nexport interface LayerModelGenerics extends BaseModelGenerics {\n\tOPTIONS: LayerModelOptions;\n\tPARENT: CanvasModel;\n\tCHILDREN: BaseModel;\n\tENGINE: CanvasEngine;\n}\n\nexport abstract class LayerModel<G extends LayerModelGenerics = LayerModelGenerics> extends BaseModel<G> {\n\tprotected models: { [id: string]: G['CHILDREN'] };\n\tprotected repaintEnabled: boolean;\n\n\tconstructor(options: G['OPTIONS'] = {}) {\n\t\tsuper(options);\n\t\tthis.models = {};\n\t\tthis.repaintEnabled = true;\n\t}\n\n\t/**\n\t * This is used for deserialization\n\t */\n\tabstract getChildModelFactoryBank(engine: G['ENGINE']): FactoryBank<AbstractModelFactory<BaseModel>>;\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.isSvg = !!event.data.isSvg;\n\t\tthis.options.transformed = !!event.data.transformed;\n\t\t_.forEach(event.data.models, (model) => {\n\t\t\tconst modelOb = this.getChildModelFactoryBank(event.engine).getFactory(model.type).generateModel({\n\t\t\t\tinitialConfig: model\n\t\t\t});\n\t\t\tmodelOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: model\n\t\t\t});\n\t\t\tthis.addModel(modelOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tisSvg: this.options.isSvg,\n\t\t\ttransformed: this.options.transformed,\n\t\t\tmodels: _.mapValues(this.models, (model) => {\n\t\t\t\treturn model.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tisRepaintEnabled() {\n\t\treturn this.repaintEnabled;\n\t}\n\n\tallowRepaint(allow: boolean = true) {\n\t\tthis.repaintEnabled = allow;\n\t}\n\n\tremove() {\n\t\tif (this.parent) {\n\t\t\tthis.parent.removeLayer(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\taddModel(model: G['CHILDREN']) {\n\t\tmodel.setParent(this);\n\t\tthis.models[model.getID()] = model;\n\t}\n\n\tgetSelectionEntities(): Array<BaseModel> {\n\t\treturn _.flatMap(this.models, (model) => {\n\t\t\treturn model.getSelectionEntities();\n\t\t});\n\t}\n\n\tgetModels() {\n\t\treturn this.models;\n\t}\n\n\tgetModel(id: string) {\n\t\treturn this.models[id];\n\t}\n\n\tremoveModel(id: string | G['CHILDREN']): boolean {\n\t\tconst _id = typeof id === 'string' ? id : id.getID();\n\t\tif (this.models[_id]) {\n\t\t\tdelete this.models[_id];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}