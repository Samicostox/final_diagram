{"ast":null,"code":"import { BaseObserver } from './BaseObserver';\nimport * as _ from 'lodash';\n/**\n * Store and managed Factories that extend from Abstractfactory\n */\nexport class FactoryBank extends BaseObserver {\n  constructor() {\n    super();\n    this.factories = {};\n  }\n  getFactories() {\n    return _.values(this.factories);\n  }\n  clearFactories() {\n    for (let factory in this.factories) {\n      this.deregisterFactory(factory);\n    }\n  }\n  getFactory(type) {\n    if (!this.factories[type]) {\n      throw new Error(`Cannot find factory with type [${type}]`);\n    }\n    return this.factories[type];\n  }\n  registerFactory(factory) {\n    factory.setFactoryBank(this);\n    this.factories[factory.getType()] = factory;\n    // todo fixme\n    this.fireEvent({\n      factory\n    }, 'factoryAdded');\n  }\n  deregisterFactory(type) {\n    const factory = this.factories[type];\n    factory.setFactoryBank(null);\n    delete this.factories[type];\n    // todo fixme\n    this.fireEvent({\n      factory\n    }, 'factoryRemoved');\n  }\n}","map":{"version":3,"names":["BaseObserver","_","FactoryBank","constructor","factories","getFactories","values","clearFactories","factory","deregisterFactory","getFactory","type","Error","registerFactory","setFactoryBank","getType","fireEvent"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-canvas-core\\src\\core\\FactoryBank.ts"],"sourcesContent":["import { BaseEvent, BaseListener, BaseObserver } from './BaseObserver';\nimport { AbstractFactory } from './AbstractFactory';\nimport * as _ from 'lodash';\n\nexport interface FactoryBankListener<F extends AbstractFactory = AbstractFactory> extends BaseListener {\n\t/**\n\t * Factory as added to rhe bank\n\t */\n\tfactoryAdded?: (event: BaseEvent & { factory: F }) => any;\n\n\t/**\n\t * Factory was removed from the bank\n\t */\n\tfactoryRemoved?: (event: BaseEvent & { factory: F }) => any;\n}\n\n/**\n * Store and managed Factories that extend from Abstractfactory\n */\nexport class FactoryBank<\n\tF extends AbstractFactory = AbstractFactory,\n\tL extends FactoryBankListener<F> = FactoryBankListener<F>\n> extends BaseObserver<L> {\n\tprotected factories: { [type: string]: F };\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.factories = {};\n\t}\n\n\tgetFactories(): F[] {\n\t\treturn _.values(this.factories);\n\t}\n\n\tclearFactories() {\n\t\tfor (let factory in this.factories) {\n\t\t\tthis.deregisterFactory(factory);\n\t\t}\n\t}\n\n\tgetFactory<T extends F = F>(type: string): T {\n\t\tif (!this.factories[type]) {\n\t\t\tthrow new Error(`Cannot find factory with type [${type}]`);\n\t\t}\n\t\treturn this.factories[type] as T;\n\t}\n\n\tregisterFactory(factory: F) {\n\t\tfactory.setFactoryBank(this);\n\t\tthis.factories[factory.getType()] = factory;\n\t\t// todo fixme\n\t\tthis.fireEvent<'factoryAdded'>({ factory } as any, 'factoryAdded');\n\t}\n\n\tderegisterFactory(type: string) {\n\t\tconst factory = this.factories[type];\n\t\tfactory.setFactoryBank(null);\n\t\tdelete this.factories[type];\n\t\t// todo fixme\n\t\tthis.fireEvent<'factoryRemoved'>({ factory } as any, 'factoryRemoved');\n\t}\n}\n"],"mappings":"AAAA,SAAkCA,YAAY,QAAQ,gBAAgB;AAEtE,OAAO,KAAKC,CAAC,MAAM,QAAQ;AAc3B;;;AAGA,OAAM,MAAOC,WAGX,SAAQF,YAAe;EAGxBG,YAAA;IACC,KAAK,EAAE;IACP,IAAI,CAACC,SAAS,GAAG,EAAE;EACpB;EAEAC,YAAYA,CAAA;IACX,OAAOJ,CAAC,CAACK,MAAM,CAAC,IAAI,CAACF,SAAS,CAAC;EAChC;EAEAG,cAAcA,CAAA;IACb,KAAK,IAAIC,OAAO,IAAI,IAAI,CAACJ,SAAS,EAAE;MACnC,IAAI,CAACK,iBAAiB,CAACD,OAAO,CAAC;;EAEjC;EAEAE,UAAUA,CAAkBC,IAAY;IACvC,IAAI,CAAC,IAAI,CAACP,SAAS,CAACO,IAAI,CAAC,EAAE;MAC1B,MAAM,IAAIC,KAAK,CAAC,kCAAkCD,IAAI,GAAG,CAAC;;IAE3D,OAAO,IAAI,CAACP,SAAS,CAACO,IAAI,CAAM;EACjC;EAEAE,eAAeA,CAACL,OAAU;IACzBA,OAAO,CAACM,cAAc,CAAC,IAAI,CAAC;IAC5B,IAAI,CAACV,SAAS,CAACI,OAAO,CAACO,OAAO,EAAE,CAAC,GAAGP,OAAO;IAC3C;IACA,IAAI,CAACQ,SAAS,CAAiB;MAAER;IAAO,CAAS,EAAE,cAAc,CAAC;EACnE;EAEAC,iBAAiBA,CAACE,IAAY;IAC7B,MAAMH,OAAO,GAAG,IAAI,CAACJ,SAAS,CAACO,IAAI,CAAC;IACpCH,OAAO,CAACM,cAAc,CAAC,IAAI,CAAC;IAC5B,OAAO,IAAI,CAACV,SAAS,CAACO,IAAI,CAAC;IAC3B;IACA,IAAI,CAACK,SAAS,CAAmB;MAAER;IAAO,CAAS,EAAE,gBAAgB,CAAC;EACvE"},"metadata":{},"sourceType":"module","externalDependencies":[]}