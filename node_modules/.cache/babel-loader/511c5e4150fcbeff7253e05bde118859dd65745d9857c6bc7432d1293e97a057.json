{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samir\\\\Diagram gen\\\\diagram-sami\\\\src\\\\datamodeldiagram.js\";\nimport React from 'react';\nimport createEngine, { DefaultNodeModel, DiagramModel, DefaultPortModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DataModelDiagram() {\n  const engine = createEngine();\n\n  // Function to create a node with fields\n  const createModelNode = (name, color, x, y, fields) => {\n    const node = new DefaultNodeModel({\n      name: name,\n      color: color\n    });\n    node.setPosition(x, y);\n    fields.forEach(field => {\n      node.addPort(new DefaultPortModel({\n        in: true,\n        name: field\n      }));\n    });\n    return node;\n  };\n\n  // Creating User and Rating nodes with fields\n  const userNode = createModelNode('User', 'rgb(0,192,255)', 100, 100, ['UserID', 'Username', 'Email', 'Password', 'CreatedAt']);\n  const ratingNode = createModelNode('Rating', 'rgb(192,255,0)', 400, 100, ['RatingID', 'UserID', 'Score', 'Comment', 'RatingDate']);\n\n  // Create and add all nodes to the model\n  const model = new DiagramModel();\n  model.addAll(userNode, ratingNode);\n\n  // Load model into engine\n  engine.setModel(model);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '400px',\n      width: '100%',\n      backgroundColor: 'grey'\n    },\n    children: /*#__PURE__*/_jsxDEV(CanvasWidget, {\n      engine: engine\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_c = DataModelDiagram;\nexport default DataModelDiagram;\nvar _c;\n$RefreshReg$(_c, \"DataModelDiagram\");","map":{"version":3,"names":["React","createEngine","DefaultNodeModel","DiagramModel","DefaultPortModel","CanvasWidget","jsxDEV","_jsxDEV","DataModelDiagram","engine","createModelNode","name","color","x","y","fields","node","setPosition","forEach","field","addPort","in","userNode","ratingNode","model","addAll","setModel","style","height","width","backgroundColor","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/samir/Diagram gen/diagram-sami/src/datamodeldiagram.js"],"sourcesContent":["import React from 'react';\r\nimport createEngine, { \r\n    DefaultNodeModel, \r\n    DiagramModel,\r\n    DefaultPortModel\r\n} from '@projectstorm/react-diagrams';\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n\r\nfunction DataModelDiagram() {\r\n    const engine = createEngine();\r\n\r\n    // Function to create a node with fields\r\n    const createModelNode = (name, color, x, y, fields) => {\r\n        const node = new DefaultNodeModel({\r\n            name: name,\r\n            color: color\r\n        });\r\n        node.setPosition(x, y);\r\n\r\n        fields.forEach(field => {\r\n            node.addPort(new DefaultPortModel({ in: true, name: field }));\r\n        });\r\n\r\n        return node;\r\n    };\r\n\r\n    // Creating User and Rating nodes with fields\r\n    const userNode = createModelNode(\r\n        'User', \r\n        'rgb(0,192,255)', \r\n        100, \r\n        100, \r\n        ['UserID', 'Username', 'Email', 'Password', 'CreatedAt']\r\n    );\r\n\r\n    const ratingNode = createModelNode(\r\n        'Rating', \r\n        'rgb(192,255,0)', \r\n        400, \r\n        100, \r\n        ['RatingID', 'UserID', 'Score', 'Comment', 'RatingDate']\r\n    );\r\n\r\n    // Create and add all nodes to the model\r\n    const model = new DiagramModel();\r\n    model.addAll(userNode, ratingNode);\r\n\r\n    // Load model into engine\r\n    engine.setModel(model);\r\n\r\n    return (\r\n        <div style={{ height: '400px', width: '100%', backgroundColor: 'grey' }}>\r\n            <CanvasWidget engine={engine} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataModelDiagram;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,IACfC,gBAAgB,EAChBC,YAAY,EACZC,gBAAgB,QACb,8BAA8B;AACrC,SAASC,YAAY,QAAQ,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,SAASC,gBAAgBA,CAAA,EAAG;EACxB,MAAMC,MAAM,GAAGR,YAAY,CAAC,CAAC;;EAE7B;EACA,MAAMS,eAAe,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,CAAC,EAAEC,CAAC,EAAEC,MAAM,KAAK;IACnD,MAAMC,IAAI,GAAG,IAAId,gBAAgB,CAAC;MAC9BS,IAAI,EAAEA,IAAI;MACVC,KAAK,EAAEA;IACX,CAAC,CAAC;IACFI,IAAI,CAACC,WAAW,CAACJ,CAAC,EAAEC,CAAC,CAAC;IAEtBC,MAAM,CAACG,OAAO,CAACC,KAAK,IAAI;MACpBH,IAAI,CAACI,OAAO,CAAC,IAAIhB,gBAAgB,CAAC;QAAEiB,EAAE,EAAE,IAAI;QAAEV,IAAI,EAAEQ;MAAM,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC;IAEF,OAAOH,IAAI;EACf,CAAC;;EAED;EACA,MAAMM,QAAQ,GAAGZ,eAAe,CAC5B,MAAM,EACN,gBAAgB,EAChB,GAAG,EACH,GAAG,EACH,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,CAC3D,CAAC;EAED,MAAMa,UAAU,GAAGb,eAAe,CAC9B,QAAQ,EACR,gBAAgB,EAChB,GAAG,EACH,GAAG,EACH,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,YAAY,CAC3D,CAAC;;EAED;EACA,MAAMc,KAAK,GAAG,IAAIrB,YAAY,CAAC,CAAC;EAChCqB,KAAK,CAACC,MAAM,CAACH,QAAQ,EAAEC,UAAU,CAAC;;EAElC;EACAd,MAAM,CAACiB,QAAQ,CAACF,KAAK,CAAC;EAEtB,oBACIjB,OAAA;IAAKoB,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE,MAAM;MAAEC,eAAe,EAAE;IAAO,CAAE;IAAAC,QAAA,eACpExB,OAAA,CAACF,YAAY;MAACI,MAAM,EAAEA;IAAO;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEd;AAACC,EAAA,GA/CQ5B,gBAAgB;AAiDzB,eAAeA,gBAAgB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}