{"ast":null,"code":"import * as _ from 'lodash';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport { BasePositionModel } from '@projectstorm/react-canvas-core';\nexport class NodeModel extends BasePositionModel {\n  constructor(options) {\n    super(options);\n    this.ports = {};\n    this.width = 0;\n    this.height = 0;\n  }\n  getBoundingBox() {\n    return Rectangle.fromPointAndSize(this.getPosition(), this.width, this.height);\n  }\n  setPosition(x, y) {\n    const old = this.position;\n    if (x instanceof Point) {\n      super.setPosition(x);\n    } else {\n      super.setPosition(x, y);\n    }\n    //also update the port co-ordinates (for make glorious speed)\n    _.forEach(this.ports, port => {\n      port.setPosition(port.getX() + this.position.x - old.x, port.getY() + this.position.y - old.y);\n    });\n  }\n  deserialize(event) {\n    super.deserialize(event);\n    //deserialize ports\n    _.forEach(event.data.ports, port => {\n      let portOb = event.engine.getFactoryForPort(port.type).generateModel({});\n      portOb.deserialize(Object.assign(Object.assign({}, event), {\n        data: port\n      }));\n      // the links need these\n      event.registerModel(portOb);\n      this.addPort(portOb);\n    });\n  }\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      ports: _.map(this.ports, port => {\n        return port.serialize();\n      })\n    });\n  }\n  doClone(lookupTable = {}, clone) {\n    // also clone the ports\n    clone.ports = {};\n    _.forEach(this.ports, port => {\n      clone.addPort(port.clone(lookupTable));\n    });\n  }\n  remove() {\n    super.remove();\n    _.forEach(this.ports, port => {\n      _.forEach(port.getLinks(), link => {\n        link.remove();\n      });\n    });\n  }\n  getPortFromID(id) {\n    for (var i in this.ports) {\n      if (this.ports[i].getID() === id) {\n        return this.ports[i];\n      }\n    }\n    return null;\n  }\n  getLink(id) {\n    for (let portID in this.ports) {\n      const links = this.ports[portID].getLinks();\n      if (links[id]) {\n        return links[id];\n      }\n    }\n  }\n  getPort(name) {\n    return this.ports[name];\n  }\n  getPorts() {\n    return this.ports;\n  }\n  removePort(port) {\n    // clear the port from the links\n    for (let link of _.values(port.getLinks())) {\n      link.clearPort(port);\n    }\n    //clear the parent node reference\n    if (this.ports[port.getName()]) {\n      this.ports[port.getName()].setParent(null);\n      delete this.ports[port.getName()];\n    }\n  }\n  addPort(port) {\n    port.setParent(this);\n    this.ports[port.getName()] = port;\n    return port;\n  }\n  updateDimensions({\n    width,\n    height\n  }) {\n    this.width = width;\n    this.height = height;\n  }\n}","map":{"version":3,"names":["_","Point","Rectangle","BasePositionModel","NodeModel","constructor","options","ports","width","height","getBoundingBox","fromPointAndSize","getPosition","setPosition","x","y","old","position","forEach","port","getX","getY","deserialize","event","data","portOb","engine","getFactoryForPort","type","generateModel","Object","assign","registerModel","addPort","serialize","map","doClone","lookupTable","clone","remove","getLinks","link","getPortFromID","id","i","getID","getLink","portID","links","getPort","name","getPorts","removePort","values","clearPort","getName","setParent","updateDimensions"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\node\\NodeModel.ts"],"sourcesContent":["import * as _ from 'lodash';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { PortModel } from '../port/PortModel';\nimport { LinkModel } from '../link/LinkModel';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelListener,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface NodeModelListener extends BaseModelListener {\n\tpositionChanged?(event: BaseEntityEvent<NodeModel>): void;\n}\n\nexport interface NodeModelGenerics extends BasePositionModelGenerics {\n\tLISTENER: NodeModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class NodeModel<G extends NodeModelGenerics = NodeModelGenerics> extends BasePositionModel<G> {\n\tprotected ports: { [s: string]: PortModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.ports = {};\n\t\tthis.width = 0;\n\t\tthis.height = 0;\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn Rectangle.fromPointAndSize(this.getPosition(), this.width, this.height);\n\t}\n\n\tsetPosition(point: Point): void;\n\tsetPosition(x: number, y: number): void;\n\tsetPosition(x: number | Point, y?: number): void {\n\t\tconst old = this.position;\n\n\t\tif (x instanceof Point) {\n\t\t\tsuper.setPosition(x);\n\t\t} else {\n\t\t\tsuper.setPosition(x, y);\n\t\t}\n\n\t\t//also update the port co-ordinates (for make glorious speed)\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tport.setPosition(port.getX() + this.position.x - old.x, port.getY() + this.position.y - old.y);\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\n\t\t//deserialize ports\n\t\t_.forEach(event.data.ports, (port: any) => {\n\t\t\tlet portOb = (event.engine as DiagramEngine).getFactoryForPort(port.type).generateModel({});\n\t\t\tportOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: port\n\t\t\t});\n\t\t\t// the links need these\n\t\t\tevent.registerModel(portOb);\n\t\t\tthis.addPort(portOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tports: _.map(this.ports, (port) => {\n\t\t\t\treturn port.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\t// also clone the ports\n\t\tclone.ports = {};\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tclone.addPort(port.clone(lookupTable));\n\t\t});\n\t}\n\n\tremove() {\n\t\tsuper.remove();\n\t\t_.forEach(this.ports, (port) => {\n\t\t\t_.forEach(port.getLinks(), (link) => {\n\t\t\t\tlink.remove();\n\t\t\t});\n\t\t});\n\t}\n\n\tgetPortFromID(id): PortModel | null {\n\t\tfor (var i in this.ports) {\n\t\t\tif (this.ports[i].getID() === id) {\n\t\t\t\treturn this.ports[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetLink(id: string): LinkModel {\n\t\tfor (let portID in this.ports) {\n\t\t\tconst links = this.ports[portID].getLinks();\n\t\t\tif (links[id]) {\n\t\t\t\treturn links[id];\n\t\t\t}\n\t\t}\n\t}\n\n\tgetPort(name: string): PortModel | null {\n\t\treturn this.ports[name];\n\t}\n\n\tgetPorts(): { [s: string]: PortModel } {\n\t\treturn this.ports;\n\t}\n\n\tremovePort(port: PortModel) {\n\t\t// clear the port from the links\n\t\tfor (let link of _.values(port.getLinks())) {\n\t\t\tlink.clearPort(port);\n\t\t}\n\t\t//clear the parent node reference\n\t\tif (this.ports[port.getName()]) {\n\t\t\tthis.ports[port.getName()].setParent(null);\n\t\t\tdelete this.ports[port.getName()];\n\t\t}\n\t}\n\n\taddPort(port: PortModel): PortModel {\n\t\tport.setParent(this);\n\t\tthis.ports[port.getName()] = port;\n\t\treturn port;\n\t}\n\n\tupdateDimensions({ width, height }: { width: number; height: number }) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}