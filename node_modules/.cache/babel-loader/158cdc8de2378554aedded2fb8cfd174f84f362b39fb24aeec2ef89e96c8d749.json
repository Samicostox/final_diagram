{"ast":null,"code":"var Heap = require('heap');\nvar Util = require('../core/Util');\nvar Heuristic = require('../core/Heuristic');\nvar DiagonalMovement = require('../core/DiagonalMovement');\n\n/**\r\n * A* path-finder.\r\n * based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\nfunction BiAStarFinder(opt) {\n  opt = opt || {};\n  this.allowDiagonal = opt.allowDiagonal;\n  this.dontCrossCorners = opt.dontCrossCorners;\n  this.diagonalMovement = opt.diagonalMovement;\n  this.heuristic = opt.heuristic || Heuristic.manhattan;\n  this.weight = opt.weight || 1;\n  if (!this.diagonalMovement) {\n    if (!this.allowDiagonal) {\n      this.diagonalMovement = DiagonalMovement.Never;\n    } else {\n      if (this.dontCrossCorners) {\n        this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\n      } else {\n        this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\n      }\n    }\n  }\n\n  //When diagonal movement is allowed the manhattan heuristic is not admissible\n  //It should be octile instead\n  if (this.diagonalMovement === DiagonalMovement.Never) {\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\n  } else {\n    this.heuristic = opt.heuristic || Heuristic.octile;\n  }\n}\n\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\nBiAStarFinder.prototype.findPath = function (startX, startY, endX, endY, grid) {\n  var cmp = function (nodeA, nodeB) {\n      return nodeA.f - nodeB.f;\n    },\n    startOpenList = new Heap(cmp),\n    endOpenList = new Heap(cmp),\n    startNode = grid.getNodeAt(startX, startY),\n    endNode = grid.getNodeAt(endX, endY),\n    heuristic = this.heuristic,\n    diagonalMovement = this.diagonalMovement,\n    weight = this.weight,\n    abs = Math.abs,\n    SQRT2 = Math.SQRT2,\n    node,\n    neighbors,\n    neighbor,\n    i,\n    l,\n    x,\n    y,\n    ng,\n    BY_START = 1,\n    BY_END = 2;\n\n  // set the `g` and `f` value of the start node to be 0\n  // and push it into the start open list\n  startNode.g = 0;\n  startNode.f = 0;\n  startOpenList.push(startNode);\n  startNode.opened = BY_START;\n\n  // set the `g` and `f` value of the end node to be 0\n  // and push it into the open open list\n  endNode.g = 0;\n  endNode.f = 0;\n  endOpenList.push(endNode);\n  endNode.opened = BY_END;\n\n  // while both the open lists are not empty\n  while (!startOpenList.empty() && !endOpenList.empty()) {\n    // pop the position of start node which has the minimum `f` value.\n    node = startOpenList.pop();\n    node.closed = true;\n\n    // get neigbours of the current node\n    neighbors = grid.getNeighbors(node, diagonalMovement);\n    for (i = 0, l = neighbors.length; i < l; ++i) {\n      neighbor = neighbors[i];\n      if (neighbor.closed) {\n        continue;\n      }\n      if (neighbor.opened === BY_END) {\n        return Util.biBacktrace(node, neighbor);\n      }\n      x = neighbor.x;\n      y = neighbor.y;\n\n      // get the distance between current node and the neighbor\n      // and calculate the next g score\n      ng = node.g + (x - node.x === 0 || y - node.y === 0 ? 1 : SQRT2);\n\n      // check if the neighbor has not been inspected yet, or\n      // can be reached with smaller cost from the current node\n      if (!neighbor.opened || ng < neighbor.g) {\n        neighbor.g = ng;\n        neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\n        neighbor.f = neighbor.g + neighbor.h;\n        neighbor.parent = node;\n        if (!neighbor.opened) {\n          startOpenList.push(neighbor);\n          neighbor.opened = BY_START;\n        } else {\n          // the neighbor can be reached with smaller cost.\n          // Since its f value has been updated, we have to\n          // update its position in the open list\n          startOpenList.updateItem(neighbor);\n        }\n      }\n    } // end for each neighbor\n\n    // pop the position of end node which has the minimum `f` value.\n    node = endOpenList.pop();\n    node.closed = true;\n\n    // get neigbours of the current node\n    neighbors = grid.getNeighbors(node, diagonalMovement);\n    for (i = 0, l = neighbors.length; i < l; ++i) {\n      neighbor = neighbors[i];\n      if (neighbor.closed) {\n        continue;\n      }\n      if (neighbor.opened === BY_START) {\n        return Util.biBacktrace(neighbor, node);\n      }\n      x = neighbor.x;\n      y = neighbor.y;\n\n      // get the distance between current node and the neighbor\n      // and calculate the next g score\n      ng = node.g + (x - node.x === 0 || y - node.y === 0 ? 1 : SQRT2);\n\n      // check if the neighbor has not been inspected yet, or\n      // can be reached with smaller cost from the current node\n      if (!neighbor.opened || ng < neighbor.g) {\n        neighbor.g = ng;\n        neighbor.h = neighbor.h || weight * heuristic(abs(x - startX), abs(y - startY));\n        neighbor.f = neighbor.g + neighbor.h;\n        neighbor.parent = node;\n        if (!neighbor.opened) {\n          endOpenList.push(neighbor);\n          neighbor.opened = BY_END;\n        } else {\n          // the neighbor can be reached with smaller cost.\n          // Since its f value has been updated, we have to\n          // update its position in the open list\n          endOpenList.updateItem(neighbor);\n        }\n      }\n    } // end for each neighbor\n  } // end while not open list empty\n\n  // fail to find the path\n  return [];\n};\nmodule.exports = BiAStarFinder;","map":{"version":3,"names":["Heap","require","Util","Heuristic","DiagonalMovement","BiAStarFinder","opt","allowDiagonal","dontCrossCorners","diagonalMovement","heuristic","manhattan","weight","Never","OnlyWhenNoObstacles","IfAtMostOneObstacle","octile","prototype","findPath","startX","startY","endX","endY","grid","cmp","nodeA","nodeB","f","startOpenList","endOpenList","startNode","getNodeAt","endNode","abs","Math","SQRT2","node","neighbors","neighbor","i","l","x","y","ng","BY_START","BY_END","g","push","opened","empty","pop","closed","getNeighbors","length","biBacktrace","h","parent","updateItem","module","exports"],"sources":["C:/Users/samir/Diagram gen/diagram-sami/node_modules/pathfinding/src/finders/BiAStarFinder.js"],"sourcesContent":["var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder.\r\n * based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction BiAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    //When diagonal movement is allowed the manhattan heuristic is not admissible\r\n    //It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var cmp = function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        },\r\n        startOpenList = new Heap(cmp),\r\n        endOpenList = new Heap(cmp),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng,\r\n        BY_START = 1, BY_END = 2;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    // and push it into the start open list\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n    startOpenList.push(startNode);\r\n    startNode.opened = BY_START;\r\n\r\n    // set the `g` and `f` value of the end node to be 0\r\n    // and push it into the open open list\r\n    endNode.g = 0;\r\n    endNode.f = 0;\r\n    endOpenList.push(endNode);\r\n    endNode.opened = BY_END;\r\n\r\n    // while both the open lists are not empty\r\n    while (!startOpenList.empty() && !endOpenList.empty()) {\r\n\r\n        // pop the position of start node which has the minimum `f` value.\r\n        node = startOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_END) {\r\n                return Util.biBacktrace(node, neighbor);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    startOpenList.push(neighbor);\r\n                    neighbor.opened = BY_START;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    startOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n\r\n\r\n        // pop the position of end node which has the minimum `f` value.\r\n        node = endOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_START) {\r\n                return Util.biBacktrace(neighbor, node);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - startX), abs(y - startY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    endOpenList.push(neighbor);\r\n                    neighbor.opened = BY_END;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    endOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiAStarFinder;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}