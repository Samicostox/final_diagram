{"ast":null,"code":"import { State } from '../core-state/State';\nimport { Action, InputType } from '../core-actions/Action';\nimport { DragCanvasState } from './DragCanvasState';\nimport { SelectingState } from './SelectingState';\nimport { MoveItemsState } from './MoveItemsState';\nexport class DefaultState extends State {\n  constructor() {\n    super({\n      name: 'default'\n    });\n    this.childStates = [new SelectingState()];\n    // determine what was clicked on\n    this.registerAction(new Action({\n      type: InputType.MOUSE_DOWN,\n      fire: event => {\n        const element = this.engine.getActionEventBus().getModelForEvent(event);\n        // the canvas was clicked on, transition to the dragging canvas state\n        if (!element) {\n          this.transitionWithEvent(new DragCanvasState(), event);\n        } else {\n          this.transitionWithEvent(new MoveItemsState(), event);\n        }\n      }\n    }));\n    // touch drags the canvas\n    this.registerAction(new Action({\n      type: InputType.TOUCH_START,\n      fire: event => {\n        this.transitionWithEvent(new DragCanvasState(), event);\n      }\n    }));\n  }\n}","map":{"version":3,"names":["State","Action","InputType","DragCanvasState","SelectingState","MoveItemsState","DefaultState","constructor","name","childStates","registerAction","type","MOUSE_DOWN","fire","event","element","engine","getActionEventBus","getModelForEvent","transitionWithEvent","TOUCH_START"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-canvas-core\\src\\states\\DefaultState.ts"],"sourcesContent":["import { State } from '../core-state/State';\nimport { Action, ActionEvent, InputType } from '../core-actions/Action';\nimport { MouseEvent, TouchEvent } from 'react';\nimport { DragCanvasState } from './DragCanvasState';\nimport { SelectingState } from './SelectingState';\nimport { MoveItemsState } from './MoveItemsState';\n\nexport class DefaultState extends State {\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'default'\n\t\t});\n\t\tthis.childStates = [new SelectingState()];\n\n\t\t// determine what was clicked on\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\t// the canvas was clicked on, transition to the dragging canvas state\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\tthis.transitionWithEvent(new DragCanvasState(), event);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.transitionWithEvent(new MoveItemsState(), event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// touch drags the canvas\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.TOUCH_START,\n\t\t\t\tfire: (event: ActionEvent<TouchEvent>) => {\n\t\t\t\t\tthis.transitionWithEvent(new DragCanvasState(), event);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,MAAM,EAAeC,SAAS,QAAQ,wBAAwB;AAEvE,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAM,MAAOC,YAAa,SAAQN,KAAK;EACtCO,YAAA;IACC,KAAK,CAAC;MACLC,IAAI,EAAE;KACN,CAAC;IACF,IAAI,CAACC,WAAW,GAAG,CAAC,IAAIL,cAAc,EAAE,CAAC;IAEzC;IACA,IAAI,CAACM,cAAc,CAClB,IAAIT,MAAM,CAAC;MACVU,IAAI,EAAET,SAAS,CAACU,UAAU;MAC1BC,IAAI,EAAGC,KAA8B,IAAI;QACxC,MAAMC,OAAO,GAAG,IAAI,CAACC,MAAM,CAACC,iBAAiB,EAAE,CAACC,gBAAgB,CAACJ,KAAK,CAAC;QAEvE;QACA,IAAI,CAACC,OAAO,EAAE;UACb,IAAI,CAACI,mBAAmB,CAAC,IAAIhB,eAAe,EAAE,EAAEW,KAAK,CAAC;SACtD,MAAM;UACN,IAAI,CAACK,mBAAmB,CAAC,IAAId,cAAc,EAAE,EAAES,KAAK,CAAC;;MAEvD;KACA,CAAC,CACF;IAED;IACA,IAAI,CAACJ,cAAc,CAClB,IAAIT,MAAM,CAAC;MACVU,IAAI,EAAET,SAAS,CAACkB,WAAW;MAC3BP,IAAI,EAAGC,KAA8B,IAAI;QACxC,IAAI,CAACK,mBAAmB,CAAC,IAAIhB,eAAe,EAAE,EAAEW,KAAK,CAAC;MACvD;KACA,CAAC,CACF;EACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}