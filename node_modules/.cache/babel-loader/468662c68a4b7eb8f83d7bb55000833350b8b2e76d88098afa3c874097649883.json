{"ast":null,"code":"import { NodeModel } from './entities/node/NodeModel';\nimport { boundingBoxFromPolygons, Rectangle } from '@projectstorm/geometry';\nimport { CanvasEngine, FactoryBank, Toolkit } from '@projectstorm/react-canvas-core';\n/**\n * Passed as a parameter to the DiagramWidget\n */\nexport class DiagramEngine extends CanvasEngine {\n  constructor(options = {}) {\n    super(options);\n    this.maxNumberPointsPerLink = 1000;\n    // create banks for the different factory types\n    this.nodeFactories = new FactoryBank();\n    this.linkFactories = new FactoryBank();\n    this.portFactories = new FactoryBank();\n    this.labelFactories = new FactoryBank();\n    const setup = factory => {\n      factory.registerListener({\n        factoryAdded: event => {\n          event.factory.setDiagramEngine(this);\n        },\n        factoryRemoved: event => {\n          event.factory.setDiagramEngine(null);\n        }\n      });\n    };\n    setup(this.nodeFactories);\n    setup(this.linkFactories);\n    setup(this.portFactories);\n    setup(this.labelFactories);\n  }\n  /**\n   * Gets a model and element under the mouse cursor\n   */\n  getMouseElement(event) {\n    var target = event.target;\n    var diagramModel = this.model;\n    //is it a port\n    var element = Toolkit.closest(target, '.port[data-name]');\n    if (element) {\n      var nodeElement = Toolkit.closest(target, '.node[data-nodeid]');\n      return diagramModel.getNode(nodeElement.getAttribute('data-nodeid')).getPort(element.getAttribute('data-name'));\n    }\n    //look for a point\n    element = Toolkit.closest(target, '.point[data-id]');\n    if (element) {\n      return diagramModel.getLink(element.getAttribute('data-linkid')).getPointModel(element.getAttribute('data-id'));\n    }\n    //look for a link\n    element = Toolkit.closest(target, '[data-linkid]');\n    if (element) {\n      return diagramModel.getLink(element.getAttribute('data-linkid'));\n    }\n    //look for a node\n    element = Toolkit.closest(target, '.node[data-nodeid]');\n    if (element) {\n      return diagramModel.getNode(element.getAttribute('data-nodeid'));\n    }\n    return null;\n  }\n  //!-------------- FACTORIES ------------\n  getNodeFactories() {\n    return this.nodeFactories;\n  }\n  getLinkFactories() {\n    return this.linkFactories;\n  }\n  getLabelFactories() {\n    return this.labelFactories;\n  }\n  getPortFactories() {\n    return this.portFactories;\n  }\n  getFactoryForNode(node) {\n    if (typeof node === 'string') {\n      return this.nodeFactories.getFactory(node);\n    }\n    return this.nodeFactories.getFactory(node.getType());\n  }\n  getFactoryForLink(link) {\n    if (typeof link === 'string') {\n      return this.linkFactories.getFactory(link);\n    }\n    return this.linkFactories.getFactory(link.getType());\n  }\n  getFactoryForLabel(label) {\n    if (typeof label === 'string') {\n      return this.labelFactories.getFactory(label);\n    }\n    return this.labelFactories.getFactory(label.getType());\n  }\n  getFactoryForPort(port) {\n    if (typeof port === 'string') {\n      return this.portFactories.getFactory(port);\n    }\n    return this.portFactories.getFactory(port.getType());\n  }\n  generateWidgetForLink(link) {\n    return this.getFactoryForLink(link).generateReactWidget({\n      model: link\n    });\n  }\n  generateWidgetForNode(node) {\n    return this.getFactoryForNode(node).generateReactWidget({\n      model: node\n    });\n  }\n  getNodeElement(node) {\n    const selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n    if (selector === null) {\n      throw new Error('Cannot find Node element with nodeID: [' + node.getID() + ']');\n    }\n    return selector;\n  }\n  getNodePortElement(port) {\n    var selector = this.canvas.querySelector(`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`);\n    if (selector === null) {\n      throw new Error('Cannot find Node Port element with nodeID: [' + port.getParent().getID() + '] and name: [' + port.getName() + ']');\n    }\n    return selector;\n  }\n  getPortCenter(port) {\n    return this.getPortCoords(port).getOrigin();\n  }\n  /**\n   * Calculate rectangular coordinates of the port passed in.\n   */\n  getPortCoords(port, element) {\n    if (!this.canvas) {\n      throw new Error('Canvas needs to be set first');\n    }\n    if (!element) {\n      element = this.getNodePortElement(port);\n    }\n    const sourceRect = element.getBoundingClientRect();\n    const point = this.getRelativeMousePoint({\n      clientX: sourceRect.left,\n      clientY: sourceRect.top\n    });\n    const zoom = this.model.getZoomLevel() / 100.0;\n    return Rectangle.fromPointAndSize(point, sourceRect.width / zoom, sourceRect.height / zoom);\n  }\n  /**\n   * Determine the width and height of the node passed in.\n   * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n   */\n  getNodeDimensions(node) {\n    if (!this.canvas) {\n      return {\n        width: 0,\n        height: 0\n      };\n    }\n    const nodeElement = this.getNodeElement(node);\n    const nodeRect = nodeElement.getBoundingClientRect();\n    return {\n      width: nodeRect.width,\n      height: nodeRect.height\n    };\n  }\n  getBoundingNodesRect(nodes) {\n    if (nodes) {\n      if (nodes.length === 0) {\n        return new Rectangle();\n      }\n      return new Rectangle(boundingBoxFromPolygons(nodes.map(node => node.getBoundingBox())));\n    }\n  }\n  zoomToFitSelectedNodes(options) {\n    const nodes = this.model.getSelectedEntities().filter(entity => entity instanceof NodeModel);\n    this.zoomToFitNodes({\n      margin: options.margin,\n      maxZoom: options.maxZoom,\n      nodes: nodes.length > 0 ? nodes : null\n    });\n  }\n  zoomToFitNodes(options) {\n    let margin = options || 0;\n    let nodes = [];\n    let maxZoom = null;\n    if (!!options && typeof options == 'object') {\n      margin = options.margin || 0;\n      nodes = options.nodes || [];\n      maxZoom = options.maxZoom || null;\n    }\n    // no node selected\n    if (nodes.length === 0) {\n      nodes = this.model.getNodes();\n    }\n    const nodesRect = this.getBoundingNodesRect(nodes);\n    if (nodesRect) {\n      // there is something we should zoom on\n      let canvasRect = this.canvas.getBoundingClientRect();\n      const calculate = (margin = 0) => {\n        // work out zoom\n        const xFactor = this.canvas.clientWidth / (nodesRect.getWidth() + margin * 2);\n        const yFactor = this.canvas.clientHeight / (nodesRect.getHeight() + margin * 2);\n        let zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n        if (maxZoom && zoomFactor > maxZoom) {\n          zoomFactor = maxZoom;\n        }\n        return {\n          zoom: zoomFactor,\n          x: canvasRect.width / 2 - ((nodesRect.getWidth() + margin * 2) / 2 + nodesRect.getTopLeft().x) * zoomFactor + margin,\n          y: canvasRect.height / 2 - ((nodesRect.getHeight() + margin * 2) / 2 + nodesRect.getTopLeft().y) * zoomFactor + margin\n        };\n      };\n      let params = calculate(0);\n      if (margin) {\n        if (params.x < margin || params.y < margin) {\n          params = calculate(margin);\n        }\n      }\n      // apply\n      this.model.setZoomLevel(params.zoom * 100);\n      this.model.setOffset(params.x, params.y);\n      this.repaintCanvas();\n    }\n  }\n  getMaxNumberPointsPerLink() {\n    return this.maxNumberPointsPerLink;\n  }\n  setMaxNumberPointsPerLink(max) {\n    this.maxNumberPointsPerLink = max;\n  }\n}","map":{"version":3,"names":["NodeModel","boundingBoxFromPolygons","Rectangle","CanvasEngine","FactoryBank","Toolkit","DiagramEngine","constructor","options","maxNumberPointsPerLink","nodeFactories","linkFactories","portFactories","labelFactories","setup","factory","registerListener","factoryAdded","event","setDiagramEngine","factoryRemoved","getMouseElement","target","diagramModel","model","element","closest","nodeElement","getNode","getAttribute","getPort","getLink","getPointModel","getNodeFactories","getLinkFactories","getLabelFactories","getPortFactories","getFactoryForNode","node","getFactory","getType","getFactoryForLink","link","getFactoryForLabel","label","getFactoryForPort","port","generateWidgetForLink","generateReactWidget","generateWidgetForNode","getNodeElement","selector","canvas","querySelector","getID","Error","getNodePortElement","getName","getParent","getPortCenter","getPortCoords","getOrigin","sourceRect","getBoundingClientRect","point","getRelativeMousePoint","clientX","left","clientY","top","zoom","getZoomLevel","fromPointAndSize","width","height","getNodeDimensions","nodeRect","getBoundingNodesRect","nodes","length","map","getBoundingBox","zoomToFitSelectedNodes","getSelectedEntities","filter","entity","zoomToFitNodes","margin","maxZoom","getNodes","nodesRect","canvasRect","calculate","xFactor","clientWidth","getWidth","yFactor","clientHeight","getHeight","zoomFactor","x","getTopLeft","y","params","setZoomLevel","setOffset","repaintCanvas","getMaxNumberPointsPerLink","setMaxNumberPointsPerLink","max"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-diagrams-core\\src\\DiagramEngine.ts"],"sourcesContent":["import { NodeModel } from './entities/node/NodeModel';\nimport { PortModel } from './entities/port/PortModel';\nimport { LinkModel } from './entities/link/LinkModel';\nimport { LabelModel } from './entities/label/LabelModel';\nimport { boundingBoxFromPolygons, Point, Rectangle } from '@projectstorm/geometry';\nimport { MouseEvent } from 'react';\nimport {\n\tAbstractModelFactory,\n\tAbstractReactFactory,\n\tBaseModel,\n\tCanvasEngine,\n\tCanvasEngineListener,\n\tCanvasEngineOptions,\n\tFactoryBank,\n\tToolkit\n} from '@projectstorm/react-canvas-core';\nimport { DiagramModel } from './models/DiagramModel';\n\n/**\n * Passed as a parameter to the DiagramWidget\n */\nexport class DiagramEngine extends CanvasEngine<CanvasEngineListener, DiagramModel> {\n\tprotected nodeFactories: FactoryBank<AbstractReactFactory<NodeModel, DiagramEngine>>;\n\tprotected linkFactories: FactoryBank<AbstractReactFactory<LinkModel, DiagramEngine>>;\n\tprotected portFactories: FactoryBank<AbstractModelFactory<PortModel, DiagramEngine>>;\n\tprotected labelFactories: FactoryBank<AbstractReactFactory<LabelModel, DiagramEngine>>;\n\n\tmaxNumberPointsPerLink: number;\n\n\tconstructor(options: CanvasEngineOptions = {}) {\n\t\tsuper(options);\n\t\tthis.maxNumberPointsPerLink = 1000;\n\n\t\t// create banks for the different factory types\n\t\tthis.nodeFactories = new FactoryBank();\n\t\tthis.linkFactories = new FactoryBank();\n\t\tthis.portFactories = new FactoryBank();\n\t\tthis.labelFactories = new FactoryBank();\n\n\t\tconst setup = (factory: FactoryBank) => {\n\t\t\tfactory.registerListener({\n\t\t\t\tfactoryAdded: (event) => {\n\t\t\t\t\tevent.factory.setDiagramEngine(this);\n\t\t\t\t},\n\t\t\t\tfactoryRemoved: (event) => {\n\t\t\t\t\tevent.factory.setDiagramEngine(null);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tsetup(this.nodeFactories);\n\t\tsetup(this.linkFactories);\n\t\tsetup(this.portFactories);\n\t\tsetup(this.labelFactories);\n\t}\n\n\t/**\n\t * Gets a model and element under the mouse cursor\n\t */\n\tgetMouseElement(event: MouseEvent): BaseModel {\n\t\tvar target = event.target as Element;\n\t\tvar diagramModel = this.model;\n\n\t\t//is it a port\n\t\tvar element = Toolkit.closest(target, '.port[data-name]');\n\t\tif (element) {\n\t\t\tvar nodeElement = Toolkit.closest(target, '.node[data-nodeid]') as HTMLElement;\n\t\t\treturn diagramModel.getNode(nodeElement.getAttribute('data-nodeid')).getPort(element.getAttribute('data-name'));\n\t\t}\n\n\t\t//look for a point\n\t\telement = Toolkit.closest(target, '.point[data-id]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getLink(element.getAttribute('data-linkid')).getPointModel(element.getAttribute('data-id'));\n\t\t}\n\n\t\t//look for a link\n\t\telement = Toolkit.closest(target, '[data-linkid]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getLink(element.getAttribute('data-linkid'));\n\t\t}\n\n\t\t//look for a node\n\t\telement = Toolkit.closest(target, '.node[data-nodeid]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getNode(element.getAttribute('data-nodeid'));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//!-------------- FACTORIES ------------\n\n\tgetNodeFactories() {\n\t\treturn this.nodeFactories;\n\t}\n\n\tgetLinkFactories() {\n\t\treturn this.linkFactories;\n\t}\n\n\tgetLabelFactories() {\n\t\treturn this.labelFactories;\n\t}\n\n\tgetPortFactories() {\n\t\treturn this.portFactories;\n\t}\n\n\tgetFactoryForNode<F extends AbstractReactFactory<NodeModel, DiagramEngine>>(node: NodeModel | string) {\n\t\tif (typeof node === 'string') {\n\t\t\treturn this.nodeFactories.getFactory(node);\n\t\t}\n\t\treturn this.nodeFactories.getFactory(node.getType());\n\t}\n\n\tgetFactoryForLink<F extends AbstractReactFactory<LinkModel, DiagramEngine>>(link: LinkModel | string) {\n\t\tif (typeof link === 'string') {\n\t\t\treturn this.linkFactories.getFactory<F>(link);\n\t\t}\n\t\treturn this.linkFactories.getFactory<F>(link.getType());\n\t}\n\n\tgetFactoryForLabel<F extends AbstractReactFactory<LabelModel, DiagramEngine>>(label: LabelModel) {\n\t\tif (typeof label === 'string') {\n\t\t\treturn this.labelFactories.getFactory(label);\n\t\t}\n\t\treturn this.labelFactories.getFactory(label.getType());\n\t}\n\n\tgetFactoryForPort<F extends AbstractModelFactory<PortModel, DiagramEngine>>(port: PortModel) {\n\t\tif (typeof port === 'string') {\n\t\t\treturn this.portFactories.getFactory<F>(port);\n\t\t}\n\t\treturn this.portFactories.getFactory<F>(port.getType());\n\t}\n\n\tgenerateWidgetForLink(link: LinkModel): JSX.Element {\n\t\treturn this.getFactoryForLink(link).generateReactWidget({ model: link });\n\t}\n\n\tgenerateWidgetForNode(node: NodeModel): JSX.Element {\n\t\treturn this.getFactoryForNode(node).generateReactWidget({ model: node });\n\t}\n\n\tgetNodeElement(node: NodeModel): Element {\n\t\tconst selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n\t\tif (selector === null) {\n\t\t\tthrow new Error('Cannot find Node element with nodeID: [' + node.getID() + ']');\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetNodePortElement(port: PortModel): any {\n\t\tvar selector = this.canvas.querySelector(\n\t\t\t`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`\n\t\t);\n\t\tif (selector === null) {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot find Node Port element with nodeID: [' +\n\t\t\t\t\tport.getParent().getID() +\n\t\t\t\t\t'] and name: [' +\n\t\t\t\t\tport.getName() +\n\t\t\t\t\t']'\n\t\t\t);\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetPortCenter(port: PortModel): Point {\n\t\treturn this.getPortCoords(port).getOrigin();\n\t}\n\n\t/**\n\t * Calculate rectangular coordinates of the port passed in.\n\t */\n\tgetPortCoords(port: PortModel, element?: HTMLDivElement): Rectangle {\n\t\tif (!this.canvas) {\n\t\t\tthrow new Error('Canvas needs to be set first');\n\t\t}\n\t\tif (!element) {\n\t\t\telement = this.getNodePortElement(port);\n\t\t}\n\t\tconst sourceRect = element.getBoundingClientRect();\n\t\tconst point = this.getRelativeMousePoint({\n\t\t\tclientX: sourceRect.left,\n\t\t\tclientY: sourceRect.top\n\t\t});\n\t\tconst zoom = this.model.getZoomLevel() / 100.0;\n\t\treturn Rectangle.fromPointAndSize(point, sourceRect.width / zoom, sourceRect.height / zoom);\n\t}\n\n\t/**\n\t * Determine the width and height of the node passed in.\n\t * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n\t */\n\tgetNodeDimensions(node: NodeModel): { width: number; height: number } {\n\t\tif (!this.canvas) {\n\t\t\treturn {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\t\t}\n\n\t\tconst nodeElement = this.getNodeElement(node);\n\t\tconst nodeRect = nodeElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\twidth: nodeRect.width,\n\t\t\theight: nodeRect.height\n\t\t};\n\t}\n\n\tgetBoundingNodesRect(nodes: NodeModel[]): Rectangle {\n\t\tif (nodes) {\n\t\t\tif (nodes.length === 0) {\n\t\t\t\treturn new Rectangle();\n\t\t\t}\n\t\t\treturn new Rectangle(boundingBoxFromPolygons(nodes.map((node) => node.getBoundingBox())));\n\t\t}\n\t}\n\n\tzoomToFitSelectedNodes(options: { margin?: number; maxZoom?: number }) {\n\t\tconst nodes: NodeModel[] = this.model\n\t\t\t.getSelectedEntities()\n\t\t\t.filter((entity) => entity instanceof NodeModel) as NodeModel[];\n\t\tthis.zoomToFitNodes({\n\t\t\tmargin: options.margin,\n\t\t\tmaxZoom: options.maxZoom,\n\t\t\tnodes: nodes.length > 0 ? nodes : null\n\t\t});\n\t}\n\n\tzoomToFitNodes(options: { margin?: number; nodes?: NodeModel[]; maxZoom?: number });\n\t/**\n\t * @deprecated\n\t */\n\tzoomToFitNodes(margin: number);\n\tzoomToFitNodes(options) {\n\t\tlet margin = options || 0;\n\t\tlet nodes: NodeModel[] = [];\n\t\tlet maxZoom: number | null = null;\n\t\tif (!!options && typeof options == 'object') {\n\t\t\tmargin = options.margin || 0;\n\t\t\tnodes = options.nodes || [];\n\t\t\tmaxZoom = options.maxZoom || null;\n\t\t}\n\n\t\t// no node selected\n\t\tif (nodes.length === 0) {\n\t\t\tnodes = this.model.getNodes();\n\t\t}\n\t\tconst nodesRect = this.getBoundingNodesRect(nodes);\n\t\tif (nodesRect) {\n\t\t\t// there is something we should zoom on\n\t\t\tlet canvasRect = this.canvas.getBoundingClientRect();\n\n\t\t\tconst calculate = (margin: number = 0) => {\n\t\t\t\t// work out zoom\n\t\t\t\tconst xFactor = this.canvas.clientWidth / (nodesRect.getWidth() + margin * 2);\n\t\t\t\tconst yFactor = this.canvas.clientHeight / (nodesRect.getHeight() + margin * 2);\n\n\t\t\t\tlet zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\t\t\t\tif (maxZoom && zoomFactor > maxZoom) {\n\t\t\t\t\tzoomFactor = maxZoom;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tzoom: zoomFactor,\n\t\t\t\t\tx:\n\t\t\t\t\t\tcanvasRect.width / 2 -\n\t\t\t\t\t\t((nodesRect.getWidth() + margin * 2) / 2 + nodesRect.getTopLeft().x) * zoomFactor +\n\t\t\t\t\t\tmargin,\n\t\t\t\t\ty:\n\t\t\t\t\t\tcanvasRect.height / 2 -\n\t\t\t\t\t\t((nodesRect.getHeight() + margin * 2) / 2 + nodesRect.getTopLeft().y) * zoomFactor +\n\t\t\t\t\t\tmargin\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tlet params = calculate(0);\n\t\t\tif (margin) {\n\t\t\t\tif (params.x < margin || params.y < margin) {\n\t\t\t\t\tparams = calculate(margin);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// apply\n\t\t\tthis.model.setZoomLevel(params.zoom * 100);\n\t\t\tthis.model.setOffset(params.x, params.y);\n\t\t\tthis.repaintCanvas();\n\t\t}\n\t}\n\n\tgetMaxNumberPointsPerLink(): number {\n\t\treturn this.maxNumberPointsPerLink;\n\t}\n\n\tsetMaxNumberPointsPerLink(max: number) {\n\t\tthis.maxNumberPointsPerLink = max;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}