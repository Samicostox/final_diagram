{"ast":null,"code":"import { SelectingState, State, Action, InputType, DragCanvasState } from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../entities/port/PortModel';\nimport { DragNewLinkState } from './DragNewLinkState';\nimport { DragDiagramItemsState } from './DragDiagramItemsState';\nexport class DefaultDiagramState extends State {\n  constructor() {\n    super({\n      name: 'default-diagrams'\n    });\n    this.childStates = [new SelectingState()];\n    this.dragCanvas = new DragCanvasState();\n    this.dragNewLink = new DragNewLinkState();\n    this.dragItems = new DragDiagramItemsState();\n    // determine what was clicked on\n    this.registerAction(new Action({\n      type: InputType.MOUSE_DOWN,\n      fire: event => {\n        const element = this.engine.getActionEventBus().getModelForEvent(event);\n        // the canvas was clicked on, transition to the dragging canvas state\n        if (!element) {\n          this.transitionWithEvent(this.dragCanvas, event);\n        }\n        // initiate dragging a new link\n        else if (element instanceof PortModel) {\n          this.transitionWithEvent(this.dragNewLink, event);\n        }\n        // move the items (and potentially link points)\n        else {\n          this.transitionWithEvent(this.dragItems, event);\n        }\n      }\n    }));\n    // touch drags the canvas\n    this.registerAction(new Action({\n      type: InputType.TOUCH_START,\n      fire: event => {\n        this.transitionWithEvent(this.dragCanvas, event);\n      }\n    }));\n  }\n}","map":{"version":3,"names":["SelectingState","State","Action","InputType","DragCanvasState","PortModel","DragNewLinkState","DragDiagramItemsState","DefaultDiagramState","constructor","name","childStates","dragCanvas","dragNewLink","dragItems","registerAction","type","MOUSE_DOWN","fire","event","element","engine","getActionEventBus","getModelForEvent","transitionWithEvent","TOUCH_START"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-diagrams-core\\src\\states\\DefaultDiagramState.ts"],"sourcesContent":["import { MouseEvent, TouchEvent } from 'react';\nimport {\n\tSelectingState,\n\tState,\n\tAction,\n\tInputType,\n\tActionEvent,\n\tDragCanvasState\n} from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../entities/port/PortModel';\nimport { DragNewLinkState } from './DragNewLinkState';\nimport { DiagramEngine } from '../DiagramEngine';\nimport { DragDiagramItemsState } from './DragDiagramItemsState';\n\nexport class DefaultDiagramState extends State<DiagramEngine> {\n\tdragCanvas: DragCanvasState;\n\tdragNewLink: DragNewLinkState;\n\tdragItems: DragDiagramItemsState;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'default-diagrams'\n\t\t});\n\t\tthis.childStates = [new SelectingState()];\n\t\tthis.dragCanvas = new DragCanvasState();\n\t\tthis.dragNewLink = new DragNewLinkState();\n\t\tthis.dragItems = new DragDiagramItemsState();\n\n\t\t// determine what was clicked on\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\t// the canvas was clicked on, transition to the dragging canvas state\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t\t}\n\t\t\t\t\t// initiate dragging a new link\n\t\t\t\t\telse if (element instanceof PortModel) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragNewLink, event);\n\t\t\t\t\t}\n\t\t\t\t\t// move the items (and potentially link points)\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragItems, event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// touch drags the canvas\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.TOUCH_START,\n\t\t\t\tfire: (event: ActionEvent<TouchEvent>) => {\n\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n"],"mappings":"AACA,SACCA,cAAc,EACdC,KAAK,EACLC,MAAM,EACNC,SAAS,EAETC,eAAe,QACT,iCAAiC;AACxC,SAASC,SAAS,QAAQ,4BAA4B;AACtD,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,SAASC,qBAAqB,QAAQ,yBAAyB;AAE/D,OAAM,MAAOC,mBAAoB,SAAQP,KAAoB;EAK5DQ,YAAA;IACC,KAAK,CAAC;MACLC,IAAI,EAAE;KACN,CAAC;IACF,IAAI,CAACC,WAAW,GAAG,CAAC,IAAIX,cAAc,EAAE,CAAC;IACzC,IAAI,CAACY,UAAU,GAAG,IAAIR,eAAe,EAAE;IACvC,IAAI,CAACS,WAAW,GAAG,IAAIP,gBAAgB,EAAE;IACzC,IAAI,CAACQ,SAAS,GAAG,IAAIP,qBAAqB,EAAE;IAE5C;IACA,IAAI,CAACQ,cAAc,CAClB,IAAIb,MAAM,CAAC;MACVc,IAAI,EAAEb,SAAS,CAACc,UAAU;MAC1BC,IAAI,EAAGC,KAA8B,IAAI;QACxC,MAAMC,OAAO,GAAG,IAAI,CAACC,MAAM,CAACC,iBAAiB,EAAE,CAACC,gBAAgB,CAACJ,KAAK,CAAC;QAEvE;QACA,IAAI,CAACC,OAAO,EAAE;UACb,IAAI,CAACI,mBAAmB,CAAC,IAAI,CAACZ,UAAU,EAAEO,KAAK,CAAC;;QAEjD;QAAA,KACK,IAAIC,OAAO,YAAYf,SAAS,EAAE;UACtC,IAAI,CAACmB,mBAAmB,CAAC,IAAI,CAACX,WAAW,EAAEM,KAAK,CAAC;;QAElD;QAAA,KACK;UACJ,IAAI,CAACK,mBAAmB,CAAC,IAAI,CAACV,SAAS,EAAEK,KAAK,CAAC;;MAEjD;KACA,CAAC,CACF;IAED;IACA,IAAI,CAACJ,cAAc,CAClB,IAAIb,MAAM,CAAC;MACVc,IAAI,EAAEb,SAAS,CAACsB,WAAW;MAC3BP,IAAI,EAAGC,KAA8B,IAAI;QACxC,IAAI,CAACK,mBAAmB,CAAC,IAAI,CAACZ,UAAU,EAAEO,KAAK,CAAC;MACjD;KACA,CAAC,CACF;EACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}