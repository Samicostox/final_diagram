{"ast":null,"code":"import { Toolkit } from '../Toolkit';\n/**\n * Base observer pattern class for working with listeners\n */\nexport class BaseObserver {\n  constructor() {\n    this.listeners = {};\n  }\n  fireEventInternal(fire, k, event) {\n    this.iterateListeners(listener => {\n      // returning false here will instruct itteration to stop\n      if (!fire && !event.firing) {\n        return false;\n      }\n      // fire selected listener\n      if (listener[k]) {\n        listener[k](event);\n      }\n    });\n  }\n  fireEvent(event, k) {\n    event = Object.assign({\n      firing: true,\n      stopPropagation: () => {\n        event.firing = false;\n      }\n    }, event);\n    // fire pre\n    this.fireEventInternal(true, 'eventWillFire', Object.assign(Object.assign({}, event), {\n      function: k\n    }));\n    // fire main event\n    this.fireEventInternal(false, k, event);\n    // fire post\n    this.fireEventInternal(true, 'eventDidFire', Object.assign(Object.assign({}, event), {\n      function: k\n    }));\n  }\n  iterateListeners(cb) {\n    for (let id in this.listeners) {\n      const res = cb(this.listeners[id]);\n      // cancel itteration on false\n      if (res === false) {\n        return;\n      }\n    }\n  }\n  getListenerHandle(listener) {\n    for (let id in this.listeners) {\n      if (this.listeners[id] === listener) {\n        return {\n          id: id,\n          listener: listener,\n          deregister: () => {\n            delete this.listeners[id];\n          }\n        };\n      }\n    }\n  }\n  registerListener(listener) {\n    const id = Toolkit.UID();\n    this.listeners[id] = listener;\n    return {\n      id: id,\n      listener: listener,\n      deregister: () => {\n        delete this.listeners[id];\n      }\n    };\n  }\n  deregisterListener(listener) {\n    if (typeof listener === 'object') {\n      listener.deregister();\n      return true;\n    }\n    const handle = this.getListenerHandle(listener);\n    if (handle) {\n      handle.deregister();\n      return true;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["Toolkit","BaseObserver","constructor","listeners","fireEventInternal","fire","k","event","iterateListeners","listener","firing","fireEvent","Object","assign","stopPropagation","function","cb","id","res","getListenerHandle","deregister","registerListener","UID","deregisterListener","handle"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-canvas-core\\src\\core\\BaseObserver.ts"],"sourcesContent":["import { Toolkit } from '../Toolkit';\n\nexport interface BaseEvent {\n\tfiring: boolean;\n\tstopPropagation: () => any;\n}\n\nexport interface BaseEventProxy extends BaseEvent {\n\tfunction: string;\n}\n\n/**\n * Listeners are always in the form of an object that contains methods that take events\n */\nexport type BaseListener = {\n\t/**\n\t * Generic event that fires before a specific event was fired\n\t */\n\teventWillFire?: (event: BaseEvent & { function: string }) => void;\n\n\t/**\n\t * Generic event that fires after a specific event was fired (even if it was consumed)\n\t */\n\teventDidFire?: (event: BaseEvent & { function: string }) => void;\n} & {\n\t/**\n\t * Type for other events that will fire\n\t */\n\t[key: string]: (event: BaseEvent) => any;\n};\n\nexport interface ListenerHandle {\n\t/**\n\t * Used to degister the listener\n\t */\n\tderegister: () => any;\n\t/**\n\t * Original ID of the listener\n\t */\n\tid: string;\n\n\t/**\n\t * Original Listener\n\t */\n\tlistener: BaseListener;\n}\n\n/**\n * Base observer pattern class for working with listeners\n */\nexport class BaseObserver<L extends BaseListener = BaseListener> {\n\tprotected listeners: { [id: string]: L };\n\n\tconstructor() {\n\t\tthis.listeners = {};\n\t}\n\n\tprivate fireEventInternal(fire: boolean, k: keyof L, event: BaseEvent) {\n\t\tthis.iterateListeners((listener) => {\n\t\t\t// returning false here will instruct itteration to stop\n\t\t\tif (!fire && !event.firing) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// fire selected listener\n\t\t\tif (listener[k]) {\n\t\t\t\tlistener[k](event as BaseEvent);\n\t\t\t}\n\t\t});\n\t}\n\n\tfireEvent<K extends keyof L>(event: Partial<Parameters<L[K]>[0]>, k: keyof L) {\n\t\tevent = {\n\t\t\tfiring: true,\n\t\t\tstopPropagation: () => {\n\t\t\t\tevent.firing = false;\n\t\t\t},\n\t\t\t...event\n\t\t};\n\n\t\t// fire pre\n\t\tthis.fireEventInternal(true, 'eventWillFire', {\n\t\t\t...event,\n\t\t\tfunction: k\n\t\t} as BaseEventProxy);\n\n\t\t// fire main event\n\t\tthis.fireEventInternal(false, k, event as BaseEvent);\n\n\t\t// fire post\n\t\tthis.fireEventInternal(true, 'eventDidFire', {\n\t\t\t...event,\n\t\t\tfunction: k\n\t\t} as BaseEventProxy);\n\t}\n\n\titerateListeners(cb: (listener: L) => any) {\n\t\tfor (let id in this.listeners) {\n\t\t\tconst res = cb(this.listeners[id]);\n\t\t\t// cancel itteration on false\n\t\t\tif (res === false) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetListenerHandle(listener: L): ListenerHandle {\n\t\tfor (let id in this.listeners) {\n\t\t\tif (this.listeners[id] === listener) {\n\t\t\t\treturn {\n\t\t\t\t\tid: id,\n\t\t\t\t\tlistener: listener,\n\t\t\t\t\tderegister: () => {\n\t\t\t\t\t\tdelete this.listeners[id];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tregisterListener(listener: L): ListenerHandle {\n\t\tconst id = Toolkit.UID();\n\t\tthis.listeners[id] = listener;\n\t\treturn {\n\t\t\tid: id,\n\t\t\tlistener: listener,\n\t\t\tderegister: () => {\n\t\t\t\tdelete this.listeners[id];\n\t\t\t}\n\t\t};\n\t}\n\n\tderegisterListener(listener: L | ListenerHandle) {\n\t\tif (typeof listener === 'object') {\n\t\t\t(listener as ListenerHandle).deregister();\n\t\t\treturn true;\n\t\t}\n\t\tconst handle = this.getListenerHandle(listener);\n\t\tif (handle) {\n\t\t\thandle.deregister();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AA+CpC;;;AAGA,OAAM,MAAOC,YAAY;EAGxBC,YAAA;IACC,IAAI,CAACC,SAAS,GAAG,EAAE;EACpB;EAEQC,iBAAiBA,CAACC,IAAa,EAAEC,CAAU,EAAEC,KAAgB;IACpE,IAAI,CAACC,gBAAgB,CAAEC,QAAQ,IAAI;MAClC;MACA,IAAI,CAACJ,IAAI,IAAI,CAACE,KAAK,CAACG,MAAM,EAAE;QAC3B,OAAO,KAAK;;MAEb;MACA,IAAID,QAAQ,CAACH,CAAC,CAAC,EAAE;QAChBG,QAAQ,CAACH,CAAC,CAAC,CAACC,KAAkB,CAAC;;IAEjC,CAAC,CAAC;EACH;EAEAI,SAASA,CAAoBJ,KAAmC,EAAED,CAAU;IAC3EC,KAAK,GAAAK,MAAA,CAAAC,MAAA;MACJH,MAAM,EAAE,IAAI;MACZI,eAAe,EAAEA,CAAA,KAAK;QACrBP,KAAK,CAACG,MAAM,GAAG,KAAK;MACrB;IAAC,GACEH,KAAK,CACR;IAED;IACA,IAAI,CAACH,iBAAiB,CAAC,IAAI,EAAE,eAAe,EAAEQ,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAC1CN,KAAK;MACRQ,QAAQ,EAAET;IAAC,EACO,CAAC;IAEpB;IACA,IAAI,CAACF,iBAAiB,CAAC,KAAK,EAAEE,CAAC,EAAEC,KAAkB,CAAC;IAEpD;IACA,IAAI,CAACH,iBAAiB,CAAC,IAAI,EAAE,cAAc,EAAEQ,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACzCN,KAAK;MACRQ,QAAQ,EAAET;IAAC,EACO,CAAC;EACrB;EAEAE,gBAAgBA,CAACQ,EAAwB;IACxC,KAAK,IAAIC,EAAE,IAAI,IAAI,CAACd,SAAS,EAAE;MAC9B,MAAMe,GAAG,GAAGF,EAAE,CAAC,IAAI,CAACb,SAAS,CAACc,EAAE,CAAC,CAAC;MAClC;MACA,IAAIC,GAAG,KAAK,KAAK,EAAE;QAClB;;;EAGH;EAEAC,iBAAiBA,CAACV,QAAW;IAC5B,KAAK,IAAIQ,EAAE,IAAI,IAAI,CAACd,SAAS,EAAE;MAC9B,IAAI,IAAI,CAACA,SAAS,CAACc,EAAE,CAAC,KAAKR,QAAQ,EAAE;QACpC,OAAO;UACNQ,EAAE,EAAEA,EAAE;UACNR,QAAQ,EAAEA,QAAQ;UAClBW,UAAU,EAAEA,CAAA,KAAK;YAChB,OAAO,IAAI,CAACjB,SAAS,CAACc,EAAE,CAAC;UAC1B;SACA;;;EAGJ;EAEAI,gBAAgBA,CAACZ,QAAW;IAC3B,MAAMQ,EAAE,GAAGjB,OAAO,CAACsB,GAAG,EAAE;IACxB,IAAI,CAACnB,SAAS,CAACc,EAAE,CAAC,GAAGR,QAAQ;IAC7B,OAAO;MACNQ,EAAE,EAAEA,EAAE;MACNR,QAAQ,EAAEA,QAAQ;MAClBW,UAAU,EAAEA,CAAA,KAAK;QAChB,OAAO,IAAI,CAACjB,SAAS,CAACc,EAAE,CAAC;MAC1B;KACA;EACF;EAEAM,kBAAkBA,CAACd,QAA4B;IAC9C,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;MAChCA,QAA2B,CAACW,UAAU,EAAE;MACzC,OAAO,IAAI;;IAEZ,MAAMI,MAAM,GAAG,IAAI,CAACL,iBAAiB,CAACV,QAAQ,CAAC;IAC/C,IAAIe,MAAM,EAAE;MACXA,MAAM,CAACJ,UAAU,EAAE;MACnB,OAAO,IAAI;;IAEZ,OAAO,KAAK;EACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}