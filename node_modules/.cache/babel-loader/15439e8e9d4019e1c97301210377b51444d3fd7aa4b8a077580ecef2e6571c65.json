{"ast":null,"code":"import { LabelModel, LinkModel, PortModelAlignment } from '@projectstorm/react-diagrams-core';\nimport { DefaultLabelModel } from '../label/DefaultLabelModel';\nimport { BezierCurve } from '@projectstorm/geometry';\nexport class DefaultLinkModel extends LinkModel {\n  constructor(options = {}) {\n    super(Object.assign({\n      type: 'default',\n      width: options.width || 3,\n      color: options.color || 'gray',\n      selectedColor: options.selectedColor || 'rgb(0,192,255)',\n      curvyness: 50\n    }, options));\n  }\n  calculateControlOffset(port) {\n    if (port.getOptions().alignment === PortModelAlignment.RIGHT) {\n      return [this.options.curvyness, 0];\n    } else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\n      return [-this.options.curvyness, 0];\n    } else if (port.getOptions().alignment === PortModelAlignment.TOP) {\n      return [0, -this.options.curvyness];\n    }\n    return [0, this.options.curvyness];\n  }\n  getSVGPath() {\n    if (this.points.length == 2) {\n      const curve = new BezierCurve();\n      curve.setSource(this.getFirstPoint().getPosition());\n      curve.setTarget(this.getLastPoint().getPosition());\n      curve.setSourceControl(this.getFirstPoint().getPosition().clone());\n      curve.setTargetControl(this.getLastPoint().getPosition().clone());\n      if (this.sourcePort) {\n        curve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\n      }\n      if (this.targetPort) {\n        curve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\n      }\n      return curve.getSVGCurve();\n    }\n  }\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      width: this.options.width,\n      color: this.options.color,\n      curvyness: this.options.curvyness,\n      selectedColor: this.options.selectedColor\n    });\n  }\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.color = event.data.color;\n    this.options.width = event.data.width;\n    this.options.curvyness = event.data.curvyness;\n    this.options.selectedColor = event.data.selectedColor;\n  }\n  addLabel(label) {\n    if (label instanceof LabelModel) {\n      return super.addLabel(label);\n    }\n    let labelOb = new DefaultLabelModel();\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n  setWidth(width) {\n    this.options.width = width;\n    this.fireEvent({\n      width\n    }, 'widthChanged');\n  }\n  setColor(color) {\n    this.options.color = color;\n    this.fireEvent({\n      color\n    }, 'colorChanged');\n  }\n}","map":{"version":3,"names":["LabelModel","LinkModel","PortModelAlignment","DefaultLabelModel","BezierCurve","DefaultLinkModel","constructor","options","Object","assign","type","width","color","selectedColor","curvyness","calculateControlOffset","port","getOptions","alignment","RIGHT","LEFT","TOP","getSVGPath","points","length","curve","setSource","getFirstPoint","getPosition","setTarget","getLastPoint","setSourceControl","clone","setTargetControl","sourcePort","getSourceControl","translate","getSourcePort","targetPort","getTargetControl","getTargetPort","getSVGCurve","serialize","deserialize","event","data","addLabel","label","labelOb","setLabel","setWidth","fireEvent","setColor"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-diagrams-defaults\\src\\link\\DefaultLinkModel.ts"],"sourcesContent":["import {\n\tDiagramEngine,\n\tLabelModel,\n\tLinkModel,\n\tLinkModelGenerics,\n\tLinkModelListener,\n\tPortModel,\n\tPortModelAlignment\n} from '@projectstorm/react-diagrams-core';\nimport { DefaultLabelModel } from '../label/DefaultLabelModel';\nimport { BezierCurve } from '@projectstorm/geometry';\nimport { BaseEntityEvent, BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n\tcolorChanged?(event: BaseEntityEvent<DefaultLinkModel> & { color: null | string }): void;\n\n\twidthChanged?(event: BaseEntityEvent<DefaultLinkModel> & { width: 0 | number }): void;\n}\n\nexport interface DefaultLinkModelOptions extends BaseModelOptions {\n\twidth?: number;\n\tcolor?: string;\n\tselectedColor?: string;\n\tcurvyness?: number;\n\ttype?: string;\n\ttestName?: string;\n}\n\nexport interface DefaultLinkModelGenerics extends LinkModelGenerics {\n\tLISTENER: DefaultLinkModelListener;\n\tOPTIONS: DefaultLinkModelOptions;\n}\n\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelGenerics> {\n\tconstructor(options: DefaultLinkModelOptions = {}) {\n\t\tsuper({\n\t\t\ttype: 'default',\n\t\t\twidth: options.width || 3,\n\t\t\tcolor: options.color || 'gray',\n\t\t\tselectedColor: options.selectedColor || 'rgb(0,192,255)',\n\t\t\tcurvyness: 50,\n\t\t\t...options\n\t\t});\n\t}\n\n\tcalculateControlOffset(port: PortModel): [number, number] {\n\t\tif (port.getOptions().alignment === PortModelAlignment.RIGHT) {\n\t\t\treturn [this.options.curvyness, 0];\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\n\t\t\treturn [-this.options.curvyness, 0];\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.TOP) {\n\t\t\treturn [0, -this.options.curvyness];\n\t\t}\n\t\treturn [0, this.options.curvyness];\n\t}\n\n\tgetSVGPath(): string {\n\t\tif (this.points.length == 2) {\n\t\t\tconst curve = new BezierCurve();\n\t\t\tcurve.setSource(this.getFirstPoint().getPosition());\n\t\t\tcurve.setTarget(this.getLastPoint().getPosition());\n\t\t\tcurve.setSourceControl(this.getFirstPoint().getPosition().clone());\n\t\t\tcurve.setTargetControl(this.getLastPoint().getPosition().clone());\n\n\t\t\tif (this.sourcePort) {\n\t\t\t\tcurve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\n\t\t\t}\n\n\t\t\tif (this.targetPort) {\n\t\t\t\tcurve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\n\t\t\t}\n\t\t\treturn curve.getSVGCurve();\n\t\t}\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\twidth: this.options.width,\n\t\t\tcolor: this.options.color,\n\t\t\tcurvyness: this.options.curvyness,\n\t\t\tselectedColor: this.options.selectedColor\n\t\t};\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.color = event.data.color;\n\t\tthis.options.width = event.data.width;\n\t\tthis.options.curvyness = event.data.curvyness;\n\t\tthis.options.selectedColor = event.data.selectedColor;\n\t}\n\n\taddLabel(label: LabelModel | string) {\n\t\tif (label instanceof LabelModel) {\n\t\t\treturn super.addLabel(label);\n\t\t}\n\t\tlet labelOb = new DefaultLabelModel();\n\t\tlabelOb.setLabel(label);\n\t\treturn super.addLabel(labelOb);\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis.options.width = width;\n\t\tthis.fireEvent({ width }, 'widthChanged');\n\t}\n\n\tsetColor(color: string) {\n\t\tthis.options.color = color;\n\t\tthis.fireEvent({ color }, 'colorChanged');\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}