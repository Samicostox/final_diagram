{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { AbstractDisplacementState } from '../core-state/AbstractDisplacementState';\nexport class DragCanvasState extends AbstractDisplacementState {\n  constructor(options = {}) {\n    super({\n      name: 'drag-canvas'\n    });\n    this.config = Object.assign({\n      allowDrag: true\n    }, options);\n  }\n  activated(prev) {\n    const _super = Object.create(null, {\n      activated: {\n        get: () => super.activated\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      _super.activated.call(this, prev);\n      this.engine.getModel().clearSelection();\n      yield this.engine.repaintCanvas(true);\n      // we can block layer rendering because we are only targeting the transforms\n      for (let layer of this.engine.getModel().getLayers()) {\n        layer.allowRepaint(false);\n      }\n      this.initialCanvasX = this.engine.getModel().getOffsetX();\n      this.initialCanvasY = this.engine.getModel().getOffsetY();\n    });\n  }\n  deactivated(next) {\n    super.deactivated(next);\n    for (let layer of this.engine.getModel().getLayers()) {\n      layer.allowRepaint(true);\n    }\n  }\n  fireMouseMoved(event) {\n    if (this.config.allowDrag) {\n      this.engine.getModel().setOffset(this.initialCanvasX + event.displacementX, this.initialCanvasY + event.displacementY);\n      this.engine.repaintCanvas();\n    }\n  }\n}","map":{"version":3,"names":["AbstractDisplacementState","DragCanvasState","constructor","options","name","config","Object","assign","allowDrag","activated","prev","_super","call","engine","getModel","clearSelection","repaintCanvas","layer","getLayers","allowRepaint","initialCanvasX","getOffsetX","initialCanvasY","getOffsetY","deactivated","next","fireMouseMoved","event","setOffset","displacementX","displacementY"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-canvas-core\\src\\states\\DragCanvasState.ts"],"sourcesContent":["import { AbstractDisplacementState, AbstractDisplacementStateEvent } from '../core-state/AbstractDisplacementState';\nimport { State } from '../core-state/State';\n\nexport interface DragCanvasStateOptions {\n\t/**\n\t * If enabled, the canvas is available to drag\n\t */\n\tallowDrag?: boolean;\n}\n\nexport class DragCanvasState extends AbstractDisplacementState {\n\t// store this as we drag the canvas\n\tinitialCanvasX: number;\n\tinitialCanvasY: number;\n\tconfig: DragCanvasStateOptions;\n\n\tconstructor(options: DragCanvasStateOptions = {}) {\n\t\tsuper({\n\t\t\tname: 'drag-canvas'\n\t\t});\n\t\tthis.config = {\n\t\t\tallowDrag: true,\n\t\t\t...options\n\t\t};\n\t}\n\n\tasync activated(prev) {\n\t\tsuper.activated(prev);\n\t\tthis.engine.getModel().clearSelection();\n\t\tawait this.engine.repaintCanvas(true);\n\n\t\t// we can block layer rendering because we are only targeting the transforms\n\t\tfor (let layer of this.engine.getModel().getLayers()) {\n\t\t\tlayer.allowRepaint(false);\n\t\t}\n\n\t\tthis.initialCanvasX = this.engine.getModel().getOffsetX();\n\t\tthis.initialCanvasY = this.engine.getModel().getOffsetY();\n\t}\n\n\tdeactivated(next: State) {\n\t\tsuper.deactivated(next);\n\t\tfor (let layer of this.engine.getModel().getLayers()) {\n\t\t\tlayer.allowRepaint(true);\n\t\t}\n\t}\n\n\tfireMouseMoved(event: AbstractDisplacementStateEvent) {\n\t\tif (this.config.allowDrag) {\n\t\t\tthis.engine\n\t\t\t\t.getModel()\n\t\t\t\t.setOffset(this.initialCanvasX + event.displacementX, this.initialCanvasY + event.displacementY);\n\t\t\tthis.engine.repaintCanvas();\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,yBAAyB,QAAwC,yCAAyC;AAUnH,OAAM,MAAOC,eAAgB,SAAQD,yBAAyB;EAM7DE,YAAYC,OAAA,GAAkC,EAAE;IAC/C,KAAK,CAAC;MACLC,IAAI,EAAE;KACN,CAAC;IACF,IAAI,CAACC,MAAM,GAAAC,MAAA,CAAAC,MAAA;MACVC,SAAS,EAAE;IAAI,GACZL,OAAO,CACV;EACF;EAEMM,SAASA,CAACC,IAAI;;;;;;;MACnBC,MAAA,CAAMF,SAAS,CAAAG,IAAA,OAACF,IAAI;MACpB,IAAI,CAACG,MAAM,CAACC,QAAQ,EAAE,CAACC,cAAc,EAAE;MACvC,MAAM,IAAI,CAACF,MAAM,CAACG,aAAa,CAAC,IAAI,CAAC;MAErC;MACA,KAAK,IAAIC,KAAK,IAAI,IAAI,CAACJ,MAAM,CAACC,QAAQ,EAAE,CAACI,SAAS,EAAE,EAAE;QACrDD,KAAK,CAACE,YAAY,CAAC,KAAK,CAAC;;MAG1B,IAAI,CAACC,cAAc,GAAG,IAAI,CAACP,MAAM,CAACC,QAAQ,EAAE,CAACO,UAAU,EAAE;MACzD,IAAI,CAACC,cAAc,GAAG,IAAI,CAACT,MAAM,CAACC,QAAQ,EAAE,CAACS,UAAU,EAAE;IAC1D,CAAC;;EAEDC,WAAWA,CAACC,IAAW;IACtB,KAAK,CAACD,WAAW,CAACC,IAAI,CAAC;IACvB,KAAK,IAAIR,KAAK,IAAI,IAAI,CAACJ,MAAM,CAACC,QAAQ,EAAE,CAACI,SAAS,EAAE,EAAE;MACrDD,KAAK,CAACE,YAAY,CAAC,IAAI,CAAC;;EAE1B;EAEAO,cAAcA,CAACC,KAAqC;IACnD,IAAI,IAAI,CAACtB,MAAM,CAACG,SAAS,EAAE;MAC1B,IAAI,CAACK,MAAM,CACTC,QAAQ,EAAE,CACVc,SAAS,CAAC,IAAI,CAACR,cAAc,GAAGO,KAAK,CAACE,aAAa,EAAE,IAAI,CAACP,cAAc,GAAGK,KAAK,CAACG,aAAa,CAAC;MACjG,IAAI,CAACjB,MAAM,CAACG,aAAa,EAAE;;EAE7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}