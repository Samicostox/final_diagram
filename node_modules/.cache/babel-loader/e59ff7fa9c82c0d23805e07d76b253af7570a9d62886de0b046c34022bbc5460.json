{"ast":null,"code":"var Node = require('./Node');\nvar DiagonalMovement = require('./DiagonalMovement');\n\n/**\r\n * The Grid class, which serves as the encapsulation of the layout of the nodes.\r\n * @constructor\r\n * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix\r\n * @param {number} height Number of rows of the grid.\r\n * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix\r\n *     representing the walkable status of the nodes(0 or false for walkable).\r\n *     If the matrix is not supplied, all the nodes will be walkable.  */\nfunction Grid(width_or_matrix, height, matrix) {\n  var width;\n  if (typeof width_or_matrix !== 'object') {\n    width = width_or_matrix;\n  } else {\n    height = width_or_matrix.length;\n    width = width_or_matrix[0].length;\n    matrix = width_or_matrix;\n  }\n\n  /**\r\n   * The number of columns of the grid.\r\n   * @type number\r\n   */\n  this.width = width;\n  /**\r\n   * The number of rows of the grid.\r\n   * @type number\r\n   */\n  this.height = height;\n\n  /**\r\n   * A 2D array of nodes.\r\n   */\n  this.nodes = this._buildNodes(width, height, matrix);\n}\n\n/**\r\n * Build and return the nodes.\r\n * @private\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing\r\n *     the walkable status of the nodes.\r\n * @see Grid\r\n */\nGrid.prototype._buildNodes = function (width, height, matrix) {\n  var i,\n    j,\n    nodes = new Array(height);\n  for (i = 0; i < height; ++i) {\n    nodes[i] = new Array(width);\n    for (j = 0; j < width; ++j) {\n      nodes[i][j] = new Node(j, i);\n    }\n  }\n  if (matrix === undefined) {\n    return nodes;\n  }\n  if (matrix.length !== height || matrix[0].length !== width) {\n    throw new Error('Matrix size does not fit');\n  }\n  for (i = 0; i < height; ++i) {\n    for (j = 0; j < width; ++j) {\n      if (matrix[i][j]) {\n        // 0, false, null will be walkable\n        // while others will be un-walkable\n        nodes[i][j].walkable = false;\n      }\n    }\n  }\n  return nodes;\n};\nGrid.prototype.getNodeAt = function (x, y) {\n  return this.nodes[y][x];\n};\n\n/**\r\n * Determine whether the node at the given position is walkable.\r\n * (Also returns false if the position is outside the grid.)\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @return {boolean} - The walkability of the node.\r\n */\nGrid.prototype.isWalkableAt = function (x, y) {\n  return this.isInside(x, y) && this.nodes[y][x].walkable;\n};\n\n/**\r\n * Determine whether the position is inside the grid.\r\n * XXX: `grid.isInside(x, y)` is wierd to read.\r\n * It should be `(x, y) is inside grid`, but I failed to find a better\r\n * name for this method.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\nGrid.prototype.isInside = function (x, y) {\n  return x >= 0 && x < this.width && y >= 0 && y < this.height;\n};\n\n/**\r\n * Set whether the node on the given position is walkable.\r\n * NOTE: throws exception if the coordinate is not inside the grid.\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @param {boolean} walkable - Whether the position is walkable.\r\n */\nGrid.prototype.setWalkableAt = function (x, y, walkable) {\n  this.nodes[y][x].walkable = walkable;\n};\n\n/**\r\n * Get the neighbors of the given node.\r\n *\r\n *     offsets      diagonalOffsets:\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 0 |   |    | 0 |   | 1 |\r\n *  +---+---+---+    +---+---+---+\r\n *  | 3 |   | 1 |    |   |   |   |\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 2 |   |    | 3 |   | 2 |\r\n *  +---+---+---+    +---+---+---+\r\n *\r\n *  When allowDiagonal is true, if offsets[i] is valid, then\r\n *  diagonalOffsets[i] and\r\n *  diagonalOffsets[(i + 1) % 4] is valid.\r\n * @param {Node} node\r\n * @param {DiagonalMovement} diagonalMovement\r\n */\nGrid.prototype.getNeighbors = function (node, diagonalMovement) {\n  var x = node.x,\n    y = node.y,\n    neighbors = [],\n    s0 = false,\n    d0 = false,\n    s1 = false,\n    d1 = false,\n    s2 = false,\n    d2 = false,\n    s3 = false,\n    d3 = false,\n    nodes = this.nodes;\n\n  // ↑\n  if (this.isWalkableAt(x, y - 1)) {\n    neighbors.push(nodes[y - 1][x]);\n    s0 = true;\n  }\n  // →\n  if (this.isWalkableAt(x + 1, y)) {\n    neighbors.push(nodes[y][x + 1]);\n    s1 = true;\n  }\n  // ↓\n  if (this.isWalkableAt(x, y + 1)) {\n    neighbors.push(nodes[y + 1][x]);\n    s2 = true;\n  }\n  // ←\n  if (this.isWalkableAt(x - 1, y)) {\n    neighbors.push(nodes[y][x - 1]);\n    s3 = true;\n  }\n  if (diagonalMovement === DiagonalMovement.Never) {\n    return neighbors;\n  }\n  if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\n    d0 = s3 && s0;\n    d1 = s0 && s1;\n    d2 = s1 && s2;\n    d3 = s2 && s3;\n  } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {\n    d0 = s3 || s0;\n    d1 = s0 || s1;\n    d2 = s1 || s2;\n    d3 = s2 || s3;\n  } else if (diagonalMovement === DiagonalMovement.Always) {\n    d0 = true;\n    d1 = true;\n    d2 = true;\n    d3 = true;\n  } else {\n    throw new Error('Incorrect value of diagonalMovement');\n  }\n\n  // ↖\n  if (d0 && this.isWalkableAt(x - 1, y - 1)) {\n    neighbors.push(nodes[y - 1][x - 1]);\n  }\n  // ↗\n  if (d1 && this.isWalkableAt(x + 1, y - 1)) {\n    neighbors.push(nodes[y - 1][x + 1]);\n  }\n  // ↘\n  if (d2 && this.isWalkableAt(x + 1, y + 1)) {\n    neighbors.push(nodes[y + 1][x + 1]);\n  }\n  // ↙\n  if (d3 && this.isWalkableAt(x - 1, y + 1)) {\n    neighbors.push(nodes[y + 1][x - 1]);\n  }\n  return neighbors;\n};\n\n/**\r\n * Get a clone of this grid.\r\n * @return {Grid} Cloned grid.\r\n */\nGrid.prototype.clone = function () {\n  var i,\n    j,\n    width = this.width,\n    height = this.height,\n    thisNodes = this.nodes,\n    newGrid = new Grid(width, height),\n    newNodes = new Array(height);\n  for (i = 0; i < height; ++i) {\n    newNodes[i] = new Array(width);\n    for (j = 0; j < width; ++j) {\n      newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);\n    }\n  }\n  newGrid.nodes = newNodes;\n  return newGrid;\n};\nmodule.exports = Grid;","map":{"version":3,"names":["Node","require","DiagonalMovement","Grid","width_or_matrix","height","matrix","width","length","nodes","_buildNodes","prototype","i","j","Array","undefined","Error","walkable","getNodeAt","x","y","isWalkableAt","isInside","setWalkableAt","getNeighbors","node","diagonalMovement","neighbors","s0","d0","s1","d1","s2","d2","s3","d3","push","Never","OnlyWhenNoObstacles","IfAtMostOneObstacle","Always","clone","thisNodes","newGrid","newNodes","module","exports"],"sources":["C:/Users/samir/Diagram gen/diagram-sami/node_modules/pathfinding/src/core/Grid.js"],"sourcesContent":["var Node = require('./Node');\r\nvar DiagonalMovement = require('./DiagonalMovement');\r\n\r\n/**\r\n * The Grid class, which serves as the encapsulation of the layout of the nodes.\r\n * @constructor\r\n * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix\r\n * @param {number} height Number of rows of the grid.\r\n * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix\r\n *     representing the walkable status of the nodes(0 or false for walkable).\r\n *     If the matrix is not supplied, all the nodes will be walkable.  */\r\nfunction Grid(width_or_matrix, height, matrix) {\r\n    var width;\r\n\r\n    if (typeof width_or_matrix !== 'object') {\r\n        width = width_or_matrix;\r\n    } else {\r\n        height = width_or_matrix.length;\r\n        width = width_or_matrix[0].length;\r\n        matrix = width_or_matrix;\r\n    }\r\n\r\n    /**\r\n     * The number of columns of the grid.\r\n     * @type number\r\n     */\r\n    this.width = width;\r\n    /**\r\n     * The number of rows of the grid.\r\n     * @type number\r\n     */\r\n    this.height = height;\r\n\r\n    /**\r\n     * A 2D array of nodes.\r\n     */\r\n    this.nodes = this._buildNodes(width, height, matrix);\r\n}\r\n\r\n/**\r\n * Build and return the nodes.\r\n * @private\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing\r\n *     the walkable status of the nodes.\r\n * @see Grid\r\n */\r\nGrid.prototype._buildNodes = function(width, height, matrix) {\r\n    var i, j,\r\n        nodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        nodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            nodes[i][j] = new Node(j, i);\r\n        }\r\n    }\r\n\r\n\r\n    if (matrix === undefined) {\r\n        return nodes;\r\n    }\r\n\r\n    if (matrix.length !== height || matrix[0].length !== width) {\r\n        throw new Error('Matrix size does not fit');\r\n    }\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        for (j = 0; j < width; ++j) {\r\n            if (matrix[i][j]) {\r\n                // 0, false, null will be walkable\r\n                // while others will be un-walkable\r\n                nodes[i][j].walkable = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return nodes;\r\n};\r\n\r\n\r\nGrid.prototype.getNodeAt = function(x, y) {\r\n    return this.nodes[y][x];\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the node at the given position is walkable.\r\n * (Also returns false if the position is outside the grid.)\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @return {boolean} - The walkability of the node.\r\n */\r\nGrid.prototype.isWalkableAt = function(x, y) {\r\n    return this.isInside(x, y) && this.nodes[y][x].walkable;\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the position is inside the grid.\r\n * XXX: `grid.isInside(x, y)` is wierd to read.\r\n * It should be `(x, y) is inside grid`, but I failed to find a better\r\n * name for this method.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nGrid.prototype.isInside = function(x, y) {\r\n    return (x >= 0 && x < this.width) && (y >= 0 && y < this.height);\r\n};\r\n\r\n\r\n/**\r\n * Set whether the node on the given position is walkable.\r\n * NOTE: throws exception if the coordinate is not inside the grid.\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @param {boolean} walkable - Whether the position is walkable.\r\n */\r\nGrid.prototype.setWalkableAt = function(x, y, walkable) {\r\n    this.nodes[y][x].walkable = walkable;\r\n};\r\n\r\n\r\n/**\r\n * Get the neighbors of the given node.\r\n *\r\n *     offsets      diagonalOffsets:\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 0 |   |    | 0 |   | 1 |\r\n *  +---+---+---+    +---+---+---+\r\n *  | 3 |   | 1 |    |   |   |   |\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 2 |   |    | 3 |   | 2 |\r\n *  +---+---+---+    +---+---+---+\r\n *\r\n *  When allowDiagonal is true, if offsets[i] is valid, then\r\n *  diagonalOffsets[i] and\r\n *  diagonalOffsets[(i + 1) % 4] is valid.\r\n * @param {Node} node\r\n * @param {DiagonalMovement} diagonalMovement\r\n */\r\nGrid.prototype.getNeighbors = function(node, diagonalMovement) {\r\n    var x = node.x,\r\n        y = node.y,\r\n        neighbors = [],\r\n        s0 = false, d0 = false,\r\n        s1 = false, d1 = false,\r\n        s2 = false, d2 = false,\r\n        s3 = false, d3 = false,\r\n        nodes = this.nodes;\r\n\r\n    // ↑\r\n    if (this.isWalkableAt(x, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x]);\r\n        s0 = true;\r\n    }\r\n    // →\r\n    if (this.isWalkableAt(x + 1, y)) {\r\n        neighbors.push(nodes[y][x + 1]);\r\n        s1 = true;\r\n    }\r\n    // ↓\r\n    if (this.isWalkableAt(x, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x]);\r\n        s2 = true;\r\n    }\r\n    // ←\r\n    if (this.isWalkableAt(x - 1, y)) {\r\n        neighbors.push(nodes[y][x - 1]);\r\n        s3 = true;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.Never) {\r\n        return neighbors;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        d0 = s3 && s0;\r\n        d1 = s0 && s1;\r\n        d2 = s1 && s2;\r\n        d3 = s2 && s3;\r\n    } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {\r\n        d0 = s3 || s0;\r\n        d1 = s0 || s1;\r\n        d2 = s1 || s2;\r\n        d3 = s2 || s3;\r\n    } else if (diagonalMovement === DiagonalMovement.Always) {\r\n        d0 = true;\r\n        d1 = true;\r\n        d2 = true;\r\n        d3 = true;\r\n    } else {\r\n        throw new Error('Incorrect value of diagonalMovement');\r\n    }\r\n\r\n    // ↖\r\n    if (d0 && this.isWalkableAt(x - 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x - 1]);\r\n    }\r\n    // ↗\r\n    if (d1 && this.isWalkableAt(x + 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x + 1]);\r\n    }\r\n    // ↘\r\n    if (d2 && this.isWalkableAt(x + 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x + 1]);\r\n    }\r\n    // ↙\r\n    if (d3 && this.isWalkableAt(x - 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x - 1]);\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\n\r\n/**\r\n * Get a clone of this grid.\r\n * @return {Grid} Cloned grid.\r\n */\r\nGrid.prototype.clone = function() {\r\n    var i, j,\r\n\r\n        width = this.width,\r\n        height = this.height,\r\n        thisNodes = this.nodes,\r\n\r\n        newGrid = new Grid(width, height),\r\n        newNodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        newNodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);\r\n        }\r\n    }\r\n\r\n    newGrid.nodes = newNodes;\r\n\r\n    return newGrid;\r\n};\r\n\r\nmodule.exports = Grid;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}