{"ast":null,"code":"import * as React from 'react';\nimport * as _ from 'lodash';\nimport { LabelWidget } from '../label/LabelWidget';\nimport { PeformanceWidget } from '@projectstorm/react-canvas-core';\nexport class LinkWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sourcePort: null,\n      targetPort: null\n    };\n  }\n  componentWillUnmount() {\n    if (this.sourceListener) {\n      this.sourceListener.deregister();\n    }\n    if (this.targetListener) {\n      this.targetListener.deregister();\n    }\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return {\n      sourcePort: nextProps.link.getSourcePort(),\n      targetPort: nextProps.link.getTargetPort()\n    };\n  }\n  installTarget() {\n    this.targetListener && this.targetListener.deregister();\n    if (!this.props.link.getTargetPort()) return;\n    this.targetListener = this.props.link.getTargetPort().registerListener({\n      reportInitialPosition: event => {\n        this.forceUpdate();\n      }\n    });\n  }\n  installSource() {\n    this.sourceListener && this.sourceListener.deregister();\n    if (!this.props.link.getSourcePort()) return;\n    this.sourceListener = this.props.link.getSourcePort().registerListener({\n      reportInitialPosition: event => {\n        this.forceUpdate();\n      }\n    });\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.sourcePort !== this.state.sourcePort) {\n      this.installSource();\n    }\n    if (prevState.targetPort !== this.state.targetPort) {\n      this.installTarget();\n    }\n  }\n  static generateLinePath(firstPoint, lastPoint) {\n    return `M${firstPoint.getX()},${firstPoint.getY()} L ${lastPoint.getX()},${lastPoint.getY()}`;\n  }\n  componentDidMount() {\n    if (this.props.link.getSourcePort()) {\n      this.installSource();\n    }\n    if (this.props.link.getTargetPort()) {\n      this.installTarget();\n    }\n  }\n  render() {\n    const {\n      link\n    } = this.props;\n    // only draw the link when we have reported positions\n    if (link.getSourcePort() && !link.getSourcePort().reportedPosition) {\n      return null;\n    }\n    if (link.getTargetPort() && !link.getTargetPort().reportedPosition) {\n      return null;\n    }\n    //generate links\n    return React.createElement(PeformanceWidget, {\n      model: this.props.link,\n      serialized: this.props.link.serialize()\n    }, () => {\n      return React.createElement(\"g\", {\n        \"data-linkid\": this.props.link.getID()\n      }, this.props.diagramEngine.generateWidgetForLink(link), _.map(this.props.link.getLabels(), (labelModel, index) => {\n        return React.createElement(LabelWidget, {\n          key: labelModel.getID(),\n          engine: this.props.diagramEngine,\n          label: labelModel,\n          index: index\n        });\n      }));\n    });\n  }\n}","map":{"version":3,"names":["React","_","LabelWidget","PeformanceWidget","LinkWidget","Component","constructor","props","state","sourcePort","targetPort","componentWillUnmount","sourceListener","deregister","targetListener","getDerivedStateFromProps","nextProps","prevState","link","getSourcePort","getTargetPort","installTarget","registerListener","reportInitialPosition","event","forceUpdate","installSource","componentDidUpdate","prevProps","snapshot","generateLinePath","firstPoint","lastPoint","getX","getY","componentDidMount","render","reportedPosition","createElement","model","serialized","serialize","getID","diagramEngine","generateWidgetForLink","map","getLabels","labelModel","index","key","engine","label"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\link\\LinkWidget.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LinkModel } from './LinkModel';\nimport { PointModel } from './PointModel';\nimport * as _ from 'lodash';\nimport { LabelWidget } from '../label/LabelWidget';\nimport { BaseEntityEvent, BasePositionModel, ListenerHandle, PeformanceWidget } from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../port/PortModel';\n\nexport interface LinkProps {\n\tlink: LinkModel;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface LinkState {\n\tsourcePort: PortModel;\n\ttargetPort: PortModel;\n}\n\nexport class LinkWidget extends React.Component<LinkProps, LinkState> {\n\tsourceListener: ListenerHandle;\n\ttargetListener: ListenerHandle;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsourcePort: null,\n\t\t\ttargetPort: null\n\t\t};\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tif (this.sourceListener) {\n\t\t\tthis.sourceListener.deregister();\n\t\t}\n\t\tif (this.targetListener) {\n\t\t\tthis.targetListener.deregister();\n\t\t}\n\t}\n\n\tstatic getDerivedStateFromProps(nextProps: LinkProps, prevState: LinkState): LinkState {\n\t\treturn {\n\t\t\tsourcePort: nextProps.link.getSourcePort(),\n\t\t\ttargetPort: nextProps.link.getTargetPort()\n\t\t};\n\t}\n\n\tinstallTarget() {\n\t\tthis.targetListener && this.targetListener.deregister();\n\n\t\tif (!this.props.link.getTargetPort()) return;\n\t\tthis.targetListener = this.props.link.getTargetPort().registerListener({\n\t\t\treportInitialPosition: (event: BaseEntityEvent<BasePositionModel>) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tinstallSource() {\n\t\tthis.sourceListener && this.sourceListener.deregister();\n\n\t\tif (!this.props.link.getSourcePort()) return;\n\t\tthis.sourceListener = this.props.link.getSourcePort().registerListener({\n\t\t\treportInitialPosition: (event: BaseEntityEvent<BasePositionModel>) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<LinkProps>, prevState: Readonly<LinkState>, snapshot) {\n\t\tif (prevState.sourcePort !== this.state.sourcePort) {\n\t\t\tthis.installSource();\n\t\t}\n\t\tif (prevState.targetPort !== this.state.targetPort) {\n\t\t\tthis.installTarget();\n\t\t}\n\t}\n\n\tpublic static generateLinePath(firstPoint: PointModel, lastPoint: PointModel): string {\n\t\treturn `M${firstPoint.getX()},${firstPoint.getY()} L ${lastPoint.getX()},${lastPoint.getY()}`;\n\t}\n\n\tcomponentDidMount(): void {\n\t\tif (this.props.link.getSourcePort()) {\n\t\t\tthis.installSource();\n\t\t}\n\t\tif (this.props.link.getTargetPort()) {\n\t\t\tthis.installTarget();\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { link } = this.props;\n\n\t\t// only draw the link when we have reported positions\n\t\tif (link.getSourcePort() && !link.getSourcePort().reportedPosition) {\n\t\t\treturn null;\n\t\t}\n\t\tif (link.getTargetPort() && !link.getTargetPort().reportedPosition) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//generate links\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.link} serialized={this.props.link.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<g data-linkid={this.props.link.getID()}>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForLink(link)}\n\t\t\t\t\t\t\t{_.map(this.props.link.getLabels(), (labelModel, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<LabelWidget\n\t\t\t\t\t\t\t\t\t\tkey={labelModel.getID()}\n\t\t\t\t\t\t\t\t\t\tengine={this.props.diagramEngine}\n\t\t\t\t\t\t\t\t\t\tlabel={labelModel}\n\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}