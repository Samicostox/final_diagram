{"ast":null,"code":"var Util = require('../core/Util');\nvar DiagonalMovement = require('../core/DiagonalMovement');\n\n/**\r\n * Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\nfunction BreadthFirstFinder(opt) {\n  opt = opt || {};\n  this.allowDiagonal = opt.allowDiagonal;\n  this.dontCrossCorners = opt.dontCrossCorners;\n  this.diagonalMovement = opt.diagonalMovement;\n  if (!this.diagonalMovement) {\n    if (!this.allowDiagonal) {\n      this.diagonalMovement = DiagonalMovement.Never;\n    } else {\n      if (this.dontCrossCorners) {\n        this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\n      } else {\n        this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\n      }\n    }\n  }\n}\n\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\nBreadthFirstFinder.prototype.findPath = function (startX, startY, endX, endY, grid) {\n  var openList = [],\n    diagonalMovement = this.diagonalMovement,\n    startNode = grid.getNodeAt(startX, startY),\n    endNode = grid.getNodeAt(endX, endY),\n    neighbors,\n    neighbor,\n    node,\n    i,\n    l;\n\n  // push the start pos into the queue\n  openList.push(startNode);\n  startNode.opened = true;\n\n  // while the queue is not empty\n  while (openList.length) {\n    // take the front node from the queue\n    node = openList.shift();\n    node.closed = true;\n\n    // reached the end position\n    if (node === endNode) {\n      return Util.backtrace(endNode);\n    }\n    neighbors = grid.getNeighbors(node, diagonalMovement);\n    for (i = 0, l = neighbors.length; i < l; ++i) {\n      neighbor = neighbors[i];\n\n      // skip this neighbor if it has been inspected before\n      if (neighbor.closed || neighbor.opened) {\n        continue;\n      }\n      openList.push(neighbor);\n      neighbor.opened = true;\n      neighbor.parent = node;\n    }\n  }\n\n  // fail to find the path\n  return [];\n};\nmodule.exports = BreadthFirstFinder;","map":{"version":3,"names":["Util","require","DiagonalMovement","BreadthFirstFinder","opt","allowDiagonal","dontCrossCorners","diagonalMovement","Never","OnlyWhenNoObstacles","IfAtMostOneObstacle","prototype","findPath","startX","startY","endX","endY","grid","openList","startNode","getNodeAt","endNode","neighbors","neighbor","node","i","l","push","opened","length","shift","closed","backtrace","getNeighbors","parent","module","exports"],"sources":["C:/Users/samir/Diagram gen/diagram-sami/node_modules/pathfinding/src/finders/BreadthFirstFinder.js"],"sourcesContent":["var Util = require('../core/Util');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = [],\r\n        diagonalMovement = this.diagonalMovement,\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        neighbors, neighbor, node, i, l;\r\n\r\n    // push the start pos into the queue\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the queue is not empty\r\n    while (openList.length) {\r\n        // take the front node from the queue\r\n        node = openList.shift();\r\n        node.closed = true;\r\n\r\n        // reached the end position\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            // skip this neighbor if it has been inspected before\r\n            if (neighbor.closed || neighbor.opened) {\r\n                continue;\r\n            }\r\n\r\n            openList.push(neighbor);\r\n            neighbor.opened = true;\r\n            neighbor.parent = node;\r\n        }\r\n    }\r\n    \r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BreadthFirstFinder;\r\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,cAAc,CAAC;AAClC,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkBA,CAACC,GAAG,EAAE;EAC7BA,GAAG,GAAGA,GAAG,IAAI,CAAC,CAAC;EACf,IAAI,CAACC,aAAa,GAAGD,GAAG,CAACC,aAAa;EACtC,IAAI,CAACC,gBAAgB,GAAGF,GAAG,CAACE,gBAAgB;EAC5C,IAAI,CAACC,gBAAgB,GAAGH,GAAG,CAACG,gBAAgB;EAE5C,IAAI,CAAC,IAAI,CAACA,gBAAgB,EAAE;IACxB,IAAI,CAAC,IAAI,CAACF,aAAa,EAAE;MACrB,IAAI,CAACE,gBAAgB,GAAGL,gBAAgB,CAACM,KAAK;IAClD,CAAC,MAAM;MACH,IAAI,IAAI,CAACF,gBAAgB,EAAE;QACvB,IAAI,CAACC,gBAAgB,GAAGL,gBAAgB,CAACO,mBAAmB;MAChE,CAAC,MAAM;QACH,IAAI,CAACF,gBAAgB,GAAGL,gBAAgB,CAACQ,mBAAmB;MAChE;IACJ;EACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACAP,kBAAkB,CAACQ,SAAS,CAACC,QAAQ,GAAG,UAASC,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAC/E,IAAIC,QAAQ,GAAG,EAAE;IACbX,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;IACxCY,SAAS,GAAGF,IAAI,CAACG,SAAS,CAACP,MAAM,EAAEC,MAAM,CAAC;IAC1CO,OAAO,GAAGJ,IAAI,CAACG,SAAS,CAACL,IAAI,EAAEC,IAAI,CAAC;IACpCM,SAAS;IAAEC,QAAQ;IAAEC,IAAI;IAAEC,CAAC;IAAEC,CAAC;;EAEnC;EACAR,QAAQ,CAACS,IAAI,CAACR,SAAS,CAAC;EACxBA,SAAS,CAACS,MAAM,GAAG,IAAI;;EAEvB;EACA,OAAOV,QAAQ,CAACW,MAAM,EAAE;IACpB;IACAL,IAAI,GAAGN,QAAQ,CAACY,KAAK,CAAC,CAAC;IACvBN,IAAI,CAACO,MAAM,GAAG,IAAI;;IAElB;IACA,IAAIP,IAAI,KAAKH,OAAO,EAAE;MAClB,OAAOrB,IAAI,CAACgC,SAAS,CAACX,OAAO,CAAC;IAClC;IAEAC,SAAS,GAAGL,IAAI,CAACgB,YAAY,CAACT,IAAI,EAAEjB,gBAAgB,CAAC;IACrD,KAAKkB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGJ,SAAS,CAACO,MAAM,EAAEJ,CAAC,GAAGC,CAAC,EAAE,EAAED,CAAC,EAAE;MAC1CF,QAAQ,GAAGD,SAAS,CAACG,CAAC,CAAC;;MAEvB;MACA,IAAIF,QAAQ,CAACQ,MAAM,IAAIR,QAAQ,CAACK,MAAM,EAAE;QACpC;MACJ;MAEAV,QAAQ,CAACS,IAAI,CAACJ,QAAQ,CAAC;MACvBA,QAAQ,CAACK,MAAM,GAAG,IAAI;MACtBL,QAAQ,CAACW,MAAM,GAAGV,IAAI;IAC1B;EACJ;;EAEA;EACA,OAAO,EAAE;AACb,CAAC;AAEDW,MAAM,CAACC,OAAO,GAAGjC,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}