{"ast":null,"code":"import * as _ from 'lodash';\nimport { LinkModel } from '../entities/link/LinkModel';\nimport { NodeModel } from '../entities/node/NodeModel';\nimport { CanvasModel } from '@projectstorm/react-canvas-core';\nimport { NodeLayerModel } from '../entities/node-layer/NodeLayerModel';\nimport { LinkLayerModel } from '../entities/link-layer/LinkLayerModel';\nexport class DiagramModel extends CanvasModel {\n  constructor(options = {}) {\n    super(options);\n    this.addLayer(new LinkLayerModel());\n    this.addLayer(new NodeLayerModel());\n  }\n  deserialize(event) {\n    this.layers = [];\n    super.deserialize(event);\n  }\n  addLayer(layer) {\n    super.addLayer(layer);\n    if (layer instanceof NodeLayerModel) {\n      this.activeNodeLayer = layer;\n    }\n    if (layer instanceof LinkLayerModel) {\n      this.activeLinkLayer = layer;\n    }\n  }\n  getLinkLayers() {\n    return _.filter(this.layers, layer => {\n      return layer instanceof LinkLayerModel;\n    });\n  }\n  getNodeLayers() {\n    return _.filter(this.layers, layer => {\n      return layer instanceof NodeLayerModel;\n    });\n  }\n  getActiveNodeLayer() {\n    if (!this.activeNodeLayer) {\n      const layers = this.getNodeLayers();\n      if (layers.length === 0) {\n        this.addLayer(new NodeLayerModel());\n      } else {\n        this.activeNodeLayer = layers[0];\n      }\n    }\n    return this.activeNodeLayer;\n  }\n  getActiveLinkLayer() {\n    if (!this.activeLinkLayer) {\n      const layers = this.getLinkLayers();\n      if (layers.length === 0) {\n        this.addLayer(new LinkLayerModel());\n      } else {\n        this.activeLinkLayer = layers[0];\n      }\n    }\n    return this.activeLinkLayer;\n  }\n  getNode(node) {\n    for (const layer of this.getNodeLayers()) {\n      const model = layer.getModel(node);\n      if (model) {\n        return model;\n      }\n    }\n  }\n  getLink(link) {\n    for (const layer of this.getLinkLayers()) {\n      const model = layer.getModel(link);\n      if (model) {\n        return model;\n      }\n    }\n  }\n  addAll(...models) {\n    _.forEach(models, model => {\n      if (model instanceof LinkModel) {\n        this.addLink(model);\n      } else if (model instanceof NodeModel) {\n        this.addNode(model);\n      }\n    });\n    return models;\n  }\n  addLink(link) {\n    this.getActiveLinkLayer().addModel(link);\n    this.fireEvent({\n      link,\n      isCreated: true\n    }, 'linksUpdated');\n    return link;\n  }\n  addNode(node) {\n    this.getActiveNodeLayer().addModel(node);\n    this.fireEvent({\n      node,\n      isCreated: true\n    }, 'nodesUpdated');\n    return node;\n  }\n  removeLink(link) {\n    const removed = _.some(this.getLinkLayers(), layer => {\n      return layer.removeModel(link);\n    });\n    if (removed) {\n      this.fireEvent({\n        link,\n        isCreated: false\n      }, 'linksUpdated');\n    }\n  }\n  removeNode(node) {\n    const removed = _.some(this.getNodeLayers(), layer => {\n      return layer.removeModel(node);\n    });\n    if (removed) {\n      this.fireEvent({\n        node,\n        isCreated: false\n      }, 'nodesUpdated');\n    }\n  }\n  getLinks() {\n    return _.flatMap(this.getLinkLayers(), layer => {\n      return _.values(layer.getModels());\n    });\n  }\n  getNodes() {\n    return _.flatMap(this.getNodeLayers(), layer => {\n      return _.values(layer.getModels());\n    });\n  }\n}","map":{"version":3,"names":["_","LinkModel","NodeModel","CanvasModel","NodeLayerModel","LinkLayerModel","DiagramModel","constructor","options","addLayer","deserialize","event","layers","layer","activeNodeLayer","activeLinkLayer","getLinkLayers","filter","getNodeLayers","getActiveNodeLayer","length","getActiveLinkLayer","getNode","node","model","getModel","getLink","link","addAll","models","forEach","addLink","addNode","addModel","fireEvent","isCreated","removeLink","removed","some","removeModel","removeNode","getLinks","flatMap","values","getModels","getNodes"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-diagrams-core\\src\\models\\DiagramModel.ts"],"sourcesContent":["import * as _ from 'lodash';\nimport { LinkModel } from '../entities/link/LinkModel';\nimport { NodeModel } from '../entities/node/NodeModel';\nimport {\n\tBaseEntityEvent,\n\tBaseEntityListener,\n\tBaseModel,\n\tCanvasModel,\n\tCanvasModelGenerics,\n\tLayerModel,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { NodeLayerModel } from '../entities/node-layer/NodeLayerModel';\nimport { LinkLayerModel } from '../entities/link-layer/LinkLayerModel';\n\nexport interface DiagramListener extends BaseEntityListener {\n\tnodesUpdated?(event: BaseEntityEvent & { node: NodeModel; isCreated: boolean }): void;\n\n\tlinksUpdated?(event: BaseEntityEvent & { link: LinkModel; isCreated: boolean }): void;\n}\n\nexport interface DiagramModelGenerics extends CanvasModelGenerics {\n\tLISTENER: DiagramListener;\n}\n\nexport class DiagramModel<G extends DiagramModelGenerics = DiagramModelGenerics> extends CanvasModel<G> {\n\tprotected activeNodeLayer: NodeLayerModel;\n\tprotected activeLinkLayer: LinkLayerModel;\n\n\tconstructor(options: G['OPTIONS'] = {}) {\n\t\tsuper(options);\n\t\tthis.addLayer(new LinkLayerModel());\n\t\tthis.addLayer(new NodeLayerModel());\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tthis.layers = [];\n\t\tsuper.deserialize(event);\n\t}\n\n\taddLayer(layer: LayerModel): void {\n\t\tsuper.addLayer(layer);\n\t\tif (layer instanceof NodeLayerModel) {\n\t\t\tthis.activeNodeLayer = layer;\n\t\t}\n\t\tif (layer instanceof LinkLayerModel) {\n\t\t\tthis.activeLinkLayer = layer;\n\t\t}\n\t}\n\n\tgetLinkLayers(): LinkLayerModel[] {\n\t\treturn _.filter(this.layers, (layer) => {\n\t\t\treturn layer instanceof LinkLayerModel;\n\t\t}) as LinkLayerModel[];\n\t}\n\n\tgetNodeLayers(): NodeLayerModel[] {\n\t\treturn _.filter(this.layers, (layer) => {\n\t\t\treturn layer instanceof NodeLayerModel;\n\t\t}) as NodeLayerModel[];\n\t}\n\n\tgetActiveNodeLayer(): NodeLayerModel {\n\t\tif (!this.activeNodeLayer) {\n\t\t\tconst layers = this.getNodeLayers();\n\t\t\tif (layers.length === 0) {\n\t\t\t\tthis.addLayer(new NodeLayerModel());\n\t\t\t} else {\n\t\t\t\tthis.activeNodeLayer = layers[0];\n\t\t\t}\n\t\t}\n\t\treturn this.activeNodeLayer;\n\t}\n\n\tgetActiveLinkLayer(): LinkLayerModel {\n\t\tif (!this.activeLinkLayer) {\n\t\t\tconst layers = this.getLinkLayers();\n\t\t\tif (layers.length === 0) {\n\t\t\t\tthis.addLayer(new LinkLayerModel());\n\t\t\t} else {\n\t\t\t\tthis.activeLinkLayer = layers[0];\n\t\t\t}\n\t\t}\n\t\treturn this.activeLinkLayer;\n\t}\n\n\tgetNode(node: string): NodeModel {\n\t\tfor (const layer of this.getNodeLayers()) {\n\t\t\tconst model = layer.getModel(node);\n\t\t\tif (model) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetLink(link: string): LinkModel {\n\t\tfor (const layer of this.getLinkLayers()) {\n\t\t\tconst model = layer.getModel(link);\n\t\t\tif (model) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\t}\n\n\taddAll(...models: BaseModel[]): BaseModel[] {\n\t\t_.forEach(models, (model) => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.addNode(model);\n\t\t\t}\n\t\t});\n\t\treturn models;\n\t}\n\n\taddLink(link: LinkModel): LinkModel {\n\t\tthis.getActiveLinkLayer().addModel(link);\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tlink,\n\t\t\t\tisCreated: true\n\t\t\t},\n\t\t\t'linksUpdated'\n\t\t);\n\t\treturn link;\n\t}\n\n\taddNode(node: NodeModel): NodeModel {\n\t\tthis.getActiveNodeLayer().addModel(node);\n\t\tthis.fireEvent({ node, isCreated: true }, 'nodesUpdated');\n\t\treturn node;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tconst removed = _.some(this.getLinkLayers(), (layer) => {\n\t\t\treturn layer.removeModel(link);\n\t\t});\n\t\tif (removed) {\n\t\t\tthis.fireEvent({ link, isCreated: false }, 'linksUpdated');\n\t\t}\n\t}\n\n\tremoveNode(node: NodeModel) {\n\t\tconst removed = _.some(this.getNodeLayers(), (layer) => {\n\t\t\treturn layer.removeModel(node);\n\t\t});\n\t\tif (removed) {\n\t\t\tthis.fireEvent({ node, isCreated: false }, 'nodesUpdated');\n\t\t}\n\t}\n\n\tgetLinks(): LinkModel[] {\n\t\treturn _.flatMap(this.getLinkLayers(), (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n\n\tgetNodes(): NodeModel[] {\n\t\treturn _.flatMap(this.getNodeLayers(), (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}