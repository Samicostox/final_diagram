{"ast":null,"code":"import { AbstractDisplacementState } from '../core-state/AbstractDisplacementState';\nimport { Action, InputType } from '../core-actions/Action';\nimport { BasePositionModel } from '../core-models/BasePositionModel';\nexport class MoveItemsState extends AbstractDisplacementState {\n  constructor() {\n    super({\n      name: 'move-items'\n    });\n    this.registerAction(new Action({\n      type: InputType.MOUSE_DOWN,\n      fire: event => {\n        const element = this.engine.getActionEventBus().getModelForEvent(event);\n        if (!element) {\n          return;\n        }\n        if (!element.isSelected()) {\n          this.engine.getModel().clearSelection();\n        }\n        element.setSelected(true);\n        this.engine.repaintCanvas();\n      }\n    }));\n  }\n  activated(previous) {\n    super.activated(previous);\n    this.initialPositions = {};\n  }\n  fireMouseMoved(event) {\n    const items = this.engine.getModel().getSelectedEntities();\n    const model = this.engine.getModel();\n    for (let item of items) {\n      if (item instanceof BasePositionModel) {\n        if (item.isLocked()) {\n          continue;\n        }\n        if (!this.initialPositions[item.getID()]) {\n          this.initialPositions[item.getID()] = {\n            point: item.getPosition(),\n            item: item\n          };\n        }\n        const pos = this.initialPositions[item.getID()].point;\n        item.setPosition(model.getGridPosition(pos.x + event.virtualDisplacementX), model.getGridPosition(pos.y + event.virtualDisplacementY));\n      }\n    }\n    this.engine.repaintCanvas();\n  }\n}","map":{"version":3,"names":["AbstractDisplacementState","Action","InputType","BasePositionModel","MoveItemsState","constructor","name","registerAction","type","MOUSE_DOWN","fire","event","element","engine","getActionEventBus","getModelForEvent","isSelected","getModel","clearSelection","setSelected","repaintCanvas","activated","previous","initialPositions","fireMouseMoved","items","getSelectedEntities","model","item","isLocked","getID","point","getPosition","pos","setPosition","getGridPosition","x","virtualDisplacementX","y","virtualDisplacementY"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-canvas-core\\src\\states\\MoveItemsState.ts"],"sourcesContent":["import { AbstractDisplacementState, AbstractDisplacementStateEvent } from '../core-state/AbstractDisplacementState';\nimport { State } from '../core-state/State';\nimport { Action, ActionEvent, InputType } from '../core-actions/Action';\nimport { BasePositionModel } from '../core-models/BasePositionModel';\nimport { Point } from '@projectstorm/geometry';\nimport { CanvasEngine } from '../CanvasEngine';\n\nexport class MoveItemsState<E extends CanvasEngine = CanvasEngine> extends AbstractDisplacementState<E> {\n\tinitialPositions: {\n\t\t[id: string]: {\n\t\t\tpoint: Point;\n\t\t\titem: BasePositionModel;\n\t\t};\n\t};\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'move-items'\n\t\t});\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<React.MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!element.isSelected()) {\n\t\t\t\t\t\tthis.engine.getModel().clearSelection();\n\t\t\t\t\t}\n\t\t\t\t\telement.setSelected(true);\n\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tactivated(previous: State) {\n\t\tsuper.activated(previous);\n\t\tthis.initialPositions = {};\n\t}\n\n\tfireMouseMoved(event: AbstractDisplacementStateEvent) {\n\t\tconst items = this.engine.getModel().getSelectedEntities();\n\t\tconst model = this.engine.getModel();\n\t\tfor (let item of items) {\n\t\t\tif (item instanceof BasePositionModel) {\n\t\t\t\tif (item.isLocked()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!this.initialPositions[item.getID()]) {\n\t\t\t\t\tthis.initialPositions[item.getID()] = {\n\t\t\t\t\t\tpoint: item.getPosition(),\n\t\t\t\t\t\titem: item\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst pos = this.initialPositions[item.getID()].point;\n\t\t\t\titem.setPosition(\n\t\t\t\t\tmodel.getGridPosition(pos.x + event.virtualDisplacementX),\n\t\t\t\t\tmodel.getGridPosition(pos.y + event.virtualDisplacementY)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis.engine.repaintCanvas();\n\t}\n}\n"],"mappings":"AAAA,SAASA,yBAAyB,QAAwC,yCAAyC;AAEnH,SAASC,MAAM,EAAeC,SAAS,QAAQ,wBAAwB;AACvE,SAASC,iBAAiB,QAAQ,kCAAkC;AAIpE,OAAM,MAAOC,cAAsD,SAAQJ,yBAA4B;EAQtGK,YAAA;IACC,KAAK,CAAC;MACLC,IAAI,EAAE;KACN,CAAC;IACF,IAAI,CAACC,cAAc,CAClB,IAAIN,MAAM,CAAC;MACVO,IAAI,EAAEN,SAAS,CAACO,UAAU;MAC1BC,IAAI,EAAGC,KAAoC,IAAI;QAC9C,MAAMC,OAAO,GAAG,IAAI,CAACC,MAAM,CAACC,iBAAiB,EAAE,CAACC,gBAAgB,CAACJ,KAAK,CAAC;QACvE,IAAI,CAACC,OAAO,EAAE;UACb;;QAED,IAAI,CAACA,OAAO,CAACI,UAAU,EAAE,EAAE;UAC1B,IAAI,CAACH,MAAM,CAACI,QAAQ,EAAE,CAACC,cAAc,EAAE;;QAExCN,OAAO,CAACO,WAAW,CAAC,IAAI,CAAC;QACzB,IAAI,CAACN,MAAM,CAACO,aAAa,EAAE;MAC5B;KACA,CAAC,CACF;EACF;EAEAC,SAASA,CAACC,QAAe;IACxB,KAAK,CAACD,SAAS,CAACC,QAAQ,CAAC;IACzB,IAAI,CAACC,gBAAgB,GAAG,EAAE;EAC3B;EAEAC,cAAcA,CAACb,KAAqC;IACnD,MAAMc,KAAK,GAAG,IAAI,CAACZ,MAAM,CAACI,QAAQ,EAAE,CAACS,mBAAmB,EAAE;IAC1D,MAAMC,KAAK,GAAG,IAAI,CAACd,MAAM,CAACI,QAAQ,EAAE;IACpC,KAAK,IAAIW,IAAI,IAAIH,KAAK,EAAE;MACvB,IAAIG,IAAI,YAAYzB,iBAAiB,EAAE;QACtC,IAAIyB,IAAI,CAACC,QAAQ,EAAE,EAAE;UACpB;;QAED,IAAI,CAAC,IAAI,CAACN,gBAAgB,CAACK,IAAI,CAACE,KAAK,EAAE,CAAC,EAAE;UACzC,IAAI,CAACP,gBAAgB,CAACK,IAAI,CAACE,KAAK,EAAE,CAAC,GAAG;YACrCC,KAAK,EAAEH,IAAI,CAACI,WAAW,EAAE;YACzBJ,IAAI,EAAEA;WACN;;QAGF,MAAMK,GAAG,GAAG,IAAI,CAACV,gBAAgB,CAACK,IAAI,CAACE,KAAK,EAAE,CAAC,CAACC,KAAK;QACrDH,IAAI,CAACM,WAAW,CACfP,KAAK,CAACQ,eAAe,CAACF,GAAG,CAACG,CAAC,GAAGzB,KAAK,CAAC0B,oBAAoB,CAAC,EACzDV,KAAK,CAACQ,eAAe,CAACF,GAAG,CAACK,CAAC,GAAG3B,KAAK,CAAC4B,oBAAoB,CAAC,CACzD;;;IAGH,IAAI,CAAC1B,MAAM,CAACO,aAAa,EAAE;EAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}