{"ast":null,"code":"import * as _ from 'lodash';\nimport { NodeModel, PortModelAlignment } from '@projectstorm/react-diagrams-core';\nimport { DefaultPortModel } from '../port/DefaultPortModel';\nexport class DefaultNodeModel extends NodeModel {\n  constructor(options = {}, color) {\n    if (typeof options === 'string') {\n      options = {\n        name: options,\n        color: color\n      };\n    }\n    super(Object.assign({\n      type: 'default',\n      name: 'Untitled',\n      color: 'rgb(0,192,255)'\n    }, options));\n    this.portsOut = [];\n    this.portsIn = [];\n  }\n  doClone(lookupTable, clone) {\n    clone.portsIn = [];\n    clone.portsOut = [];\n    super.doClone(lookupTable, clone);\n  }\n  removePort(port) {\n    super.removePort(port);\n    if (port.getOptions().in) {\n      this.portsIn.splice(this.portsIn.indexOf(port), 1);\n    } else {\n      this.portsOut.splice(this.portsOut.indexOf(port), 1);\n    }\n  }\n  addPort(port) {\n    super.addPort(port);\n    if (port.getOptions().in) {\n      if (this.portsIn.indexOf(port) === -1) {\n        this.portsIn.push(port);\n      }\n    } else {\n      if (this.portsOut.indexOf(port) === -1) {\n        this.portsOut.push(port);\n      }\n    }\n    return port;\n  }\n  addInPort(label, after = true) {\n    const p = new DefaultPortModel({\n      in: true,\n      name: label,\n      label: label,\n      alignment: PortModelAlignment.LEFT\n    });\n    if (!after) {\n      this.portsIn.splice(0, 0, p);\n    }\n    return this.addPort(p);\n  }\n  addOutPort(label, after = true) {\n    const p = new DefaultPortModel({\n      in: false,\n      name: label,\n      label: label,\n      alignment: PortModelAlignment.RIGHT\n    });\n    if (!after) {\n      this.portsOut.splice(0, 0, p);\n    }\n    return this.addPort(p);\n  }\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.name = event.data.name;\n    this.options.color = event.data.color;\n    this.portsIn = _.map(event.data.portsInOrder, id => {\n      return this.getPortFromID(id);\n    });\n    this.portsOut = _.map(event.data.portsOutOrder, id => {\n      return this.getPortFromID(id);\n    });\n  }\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      name: this.options.name,\n      color: this.options.color,\n      portsInOrder: _.map(this.portsIn, port => {\n        return port.getID();\n      }),\n      portsOutOrder: _.map(this.portsOut, port => {\n        return port.getID();\n      })\n    });\n  }\n  getInPorts() {\n    return this.portsIn;\n  }\n  getOutPorts() {\n    return this.portsOut;\n  }\n}","map":{"version":3,"names":["_","NodeModel","PortModelAlignment","DefaultPortModel","DefaultNodeModel","constructor","options","color","name","Object","assign","type","portsOut","portsIn","doClone","lookupTable","clone","removePort","port","getOptions","in","splice","indexOf","addPort","push","addInPort","label","after","p","alignment","LEFT","addOutPort","RIGHT","deserialize","event","data","map","portsInOrder","id","getPortFromID","portsOutOrder","serialize","getID","getInPorts","getOutPorts"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-diagrams-defaults\\src\\node\\DefaultNodeModel.ts"],"sourcesContent":["import * as _ from 'lodash';\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\nimport { DefaultPortModel } from '../port/DefaultPortModel';\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\n\tname?: string;\n\tcolor?: string;\n}\n\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\n\tOPTIONS: DefaultNodeModelOptions;\n}\n\nexport class DefaultNodeModel extends NodeModel<DefaultNodeModelGenerics> {\n\tprotected portsIn: DefaultPortModel[];\n\tprotected portsOut: DefaultPortModel[];\n\n\tconstructor(name: string, color: string);\n\tconstructor(options?: DefaultNodeModelOptions);\n\tconstructor(options: any = {}, color?: string) {\n\t\tif (typeof options === 'string') {\n\t\t\toptions = {\n\t\t\t\tname: options,\n\t\t\t\tcolor: color\n\t\t\t};\n\t\t}\n\t\tsuper({\n\t\t\ttype: 'default',\n\t\t\tname: 'Untitled',\n\t\t\tcolor: 'rgb(0,192,255)',\n\t\t\t...options\n\t\t});\n\t\tthis.portsOut = [];\n\t\tthis.portsIn = [];\n\t}\n\n\tdoClone(lookupTable: {}, clone: any): void {\n\t\tclone.portsIn = [];\n\t\tclone.portsOut = [];\n\t\tsuper.doClone(lookupTable, clone);\n\t}\n\n\tremovePort(port: DefaultPortModel): void {\n\t\tsuper.removePort(port);\n\t\tif (port.getOptions().in) {\n\t\t\tthis.portsIn.splice(this.portsIn.indexOf(port), 1);\n\t\t} else {\n\t\t\tthis.portsOut.splice(this.portsOut.indexOf(port), 1);\n\t\t}\n\t}\n\n\taddPort<T extends DefaultPortModel>(port: T): T {\n\t\tsuper.addPort(port);\n\t\tif (port.getOptions().in) {\n\t\t\tif (this.portsIn.indexOf(port) === -1) {\n\t\t\t\tthis.portsIn.push(port);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.portsOut.indexOf(port) === -1) {\n\t\t\t\tthis.portsOut.push(port);\n\t\t\t}\n\t\t}\n\t\treturn port;\n\t}\n\n\taddInPort(label: string, after = true): DefaultPortModel {\n\t\tconst p = new DefaultPortModel({\n\t\t\tin: true,\n\t\t\tname: label,\n\t\t\tlabel: label,\n\t\t\talignment: PortModelAlignment.LEFT\n\t\t});\n\t\tif (!after) {\n\t\t\tthis.portsIn.splice(0, 0, p);\n\t\t}\n\t\treturn this.addPort(p);\n\t}\n\n\taddOutPort(label: string, after = true): DefaultPortModel {\n\t\tconst p = new DefaultPortModel({\n\t\t\tin: false,\n\t\t\tname: label,\n\t\t\tlabel: label,\n\t\t\talignment: PortModelAlignment.RIGHT\n\t\t});\n\t\tif (!after) {\n\t\t\tthis.portsOut.splice(0, 0, p);\n\t\t}\n\t\treturn this.addPort(p);\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.name = event.data.name;\n\t\tthis.options.color = event.data.color;\n\t\tthis.portsIn = _.map(event.data.portsInOrder, (id) => {\n\t\t\treturn this.getPortFromID(id);\n\t\t}) as DefaultPortModel[];\n\t\tthis.portsOut = _.map(event.data.portsOutOrder, (id) => {\n\t\t\treturn this.getPortFromID(id);\n\t\t}) as DefaultPortModel[];\n\t}\n\n\tserialize(): any {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.options.name,\n\t\t\tcolor: this.options.color,\n\t\t\tportsInOrder: _.map(this.portsIn, (port) => {\n\t\t\t\treturn port.getID();\n\t\t\t}),\n\t\t\tportsOutOrder: _.map(this.portsOut, (port) => {\n\t\t\t\treturn port.getID();\n\t\t\t})\n\t\t};\n\t}\n\n\tgetInPorts(): DefaultPortModel[] {\n\t\treturn this.portsIn;\n\t}\n\n\tgetOutPorts(): DefaultPortModel[] {\n\t\treturn this.portsOut;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}