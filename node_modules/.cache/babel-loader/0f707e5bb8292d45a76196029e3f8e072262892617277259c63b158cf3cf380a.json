{"ast":null,"code":"/**\n * Base factory for all the different types of entities.\n * Gets registered with the engine, and is used to generate models\n */\nexport class AbstractFactory {\n  constructor(type) {\n    this.type = type;\n  }\n  setDiagramEngine(engine) {\n    this.engine = engine;\n  }\n  setFactoryBank(bank) {\n    this.bank = bank;\n  }\n  getType() {\n    return this.type;\n  }\n}","map":{"version":3,"names":["AbstractFactory","constructor","type","setDiagramEngine","engine","setFactoryBank","bank","getType"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-canvas-core\\src\\core\\AbstractFactory.ts"],"sourcesContent":["import { CanvasEngine } from '../CanvasEngine';\nimport { FactoryBank } from './FactoryBank';\n\n/**\n * Base factory for all the different types of entities.\n * Gets registered with the engine, and is used to generate models\n */\nexport abstract class AbstractFactory<E extends CanvasEngine = CanvasEngine> {\n\t/**\n\t * Couples the factory with the models it generates\n\t */\n\tprotected type: string;\n\t/**\n\t * The engine gets injected when the factory is registered\n\t */\n\tprotected engine: E;\n\tprotected bank: FactoryBank;\n\n\tconstructor(type: string) {\n\t\tthis.type = type;\n\t}\n\n\tsetDiagramEngine(engine: E) {\n\t\tthis.engine = engine;\n\t}\n\n\tsetFactoryBank(bank: FactoryBank) {\n\t\tthis.bank = bank;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n}\n"],"mappings":"AAGA;;;;AAIA,OAAM,MAAgBA,eAAe;EAWpCC,YAAYC,IAAY;IACvB,IAAI,CAACA,IAAI,GAAGA,IAAI;EACjB;EAEAC,gBAAgBA,CAACC,MAAS;IACzB,IAAI,CAACA,MAAM,GAAGA,MAAM;EACrB;EAEAC,cAAcA,CAACC,IAAiB;IAC/B,IAAI,CAACA,IAAI,GAAGA,IAAI;EACjB;EAEAC,OAAOA,CAAA;IACN,OAAO,IAAI,CAACL,IAAI;EACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}