{"ast":null,"code":"import { Point } from './Point';\nimport * as _ from 'lodash';\nimport { BoundsCorner, createEmptyBounds } from './Bounds';\nexport const boundingBoxFromPoints = points => {\n  if (points.length === 0) {\n    return createEmptyBounds();\n  }\n  let minX = points[0].x;\n  let maxX = points[0].x;\n  let minY = points[0].y;\n  let maxY = points[0].y;\n  for (let i = 1; i < points.length; i++) {\n    if (points[i].x < minX) {\n      minX = points[i].x;\n    }\n    if (points[i].x > maxX) {\n      maxX = points[i].x;\n    }\n    if (points[i].y < minY) {\n      minY = points[i].y;\n    }\n    if (points[i].y > maxY) {\n      maxY = points[i].y;\n    }\n  }\n  return {\n    [BoundsCorner.TOP_LEFT]: new Point(minX, minY),\n    [BoundsCorner.TOP_RIGHT]: new Point(maxX, minY),\n    [BoundsCorner.BOTTOM_RIGHT]: new Point(maxX, maxY),\n    [BoundsCorner.BOTTOM_LEFT]: new Point(minX, maxY)\n  };\n};\nexport const boundingBoxFromPolygons = polygons => {\n  return boundingBoxFromPoints(_.flatMap(polygons, polygon => {\n    return polygon.getPoints();\n  }));\n};","map":{"version":3,"names":["Point","_","BoundsCorner","createEmptyBounds","boundingBoxFromPoints","points","length","minX","x","maxX","minY","y","maxY","i","TOP_LEFT","TOP_RIGHT","BOTTOM_RIGHT","BOTTOM_LEFT","boundingBoxFromPolygons","polygons","flatMap","polygon","getPoints"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\geometry\\src\\toolkit.ts"],"sourcesContent":["import { Point } from './Point';\nimport * as _ from 'lodash';\nimport { Polygon } from './Polygon';\nimport { Bounds, BoundsCorner, createEmptyBounds } from './Bounds';\n\nexport const boundingBoxFromPoints = (points: Point[]): Bounds => {\n\tif (points.length === 0) {\n\t\treturn createEmptyBounds();\n\t}\n\n\tlet minX = points[0].x;\n\tlet maxX = points[0].x;\n\tlet minY = points[0].y;\n\tlet maxY = points[0].y;\n\n\tfor (let i = 1; i < points.length; i++) {\n\t\tif (points[i].x < minX) {\n\t\t\tminX = points[i].x;\n\t\t}\n\t\tif (points[i].x > maxX) {\n\t\t\tmaxX = points[i].x;\n\t\t}\n\t\tif (points[i].y < minY) {\n\t\t\tminY = points[i].y;\n\t\t}\n\t\tif (points[i].y > maxY) {\n\t\t\tmaxY = points[i].y;\n\t\t}\n\t}\n\n\treturn {\n\t\t[BoundsCorner.TOP_LEFT]: new Point(minX, minY),\n\t\t[BoundsCorner.TOP_RIGHT]: new Point(maxX, minY),\n\t\t[BoundsCorner.BOTTOM_RIGHT]: new Point(maxX, maxY),\n\t\t[BoundsCorner.BOTTOM_LEFT]: new Point(minX, maxY)\n\t};\n};\n\nexport const boundingBoxFromPolygons = (polygons: Polygon[]): Bounds => {\n\treturn boundingBoxFromPoints(\n\t\t_.flatMap(polygons, (polygon) => {\n\t\t\treturn polygon.getPoints();\n\t\t})\n\t);\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,SAAS;AAC/B,OAAO,KAAKC,CAAC,MAAM,QAAQ;AAE3B,SAAiBC,YAAY,EAAEC,iBAAiB,QAAQ,UAAU;AAElE,OAAO,MAAMC,qBAAqB,GAAIC,MAAe,IAAY;EAChE,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;IACxB,OAAOH,iBAAiB,EAAE;;EAG3B,IAAII,IAAI,GAAGF,MAAM,CAAC,CAAC,CAAC,CAACG,CAAC;EACtB,IAAIC,IAAI,GAAGJ,MAAM,CAAC,CAAC,CAAC,CAACG,CAAC;EACtB,IAAIE,IAAI,GAAGL,MAAM,CAAC,CAAC,CAAC,CAACM,CAAC;EACtB,IAAIC,IAAI,GAAGP,MAAM,CAAC,CAAC,CAAC,CAACM,CAAC;EAEtB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,MAAM,CAACC,MAAM,EAAEO,CAAC,EAAE,EAAE;IACvC,IAAIR,MAAM,CAACQ,CAAC,CAAC,CAACL,CAAC,GAAGD,IAAI,EAAE;MACvBA,IAAI,GAAGF,MAAM,CAACQ,CAAC,CAAC,CAACL,CAAC;;IAEnB,IAAIH,MAAM,CAACQ,CAAC,CAAC,CAACL,CAAC,GAAGC,IAAI,EAAE;MACvBA,IAAI,GAAGJ,MAAM,CAACQ,CAAC,CAAC,CAACL,CAAC;;IAEnB,IAAIH,MAAM,CAACQ,CAAC,CAAC,CAACF,CAAC,GAAGD,IAAI,EAAE;MACvBA,IAAI,GAAGL,MAAM,CAACQ,CAAC,CAAC,CAACF,CAAC;;IAEnB,IAAIN,MAAM,CAACQ,CAAC,CAAC,CAACF,CAAC,GAAGC,IAAI,EAAE;MACvBA,IAAI,GAAGP,MAAM,CAACQ,CAAC,CAAC,CAACF,CAAC;;;EAIpB,OAAO;IACN,CAACT,YAAY,CAACY,QAAQ,GAAG,IAAId,KAAK,CAACO,IAAI,EAAEG,IAAI,CAAC;IAC9C,CAACR,YAAY,CAACa,SAAS,GAAG,IAAIf,KAAK,CAACS,IAAI,EAAEC,IAAI,CAAC;IAC/C,CAACR,YAAY,CAACc,YAAY,GAAG,IAAIhB,KAAK,CAACS,IAAI,EAAEG,IAAI,CAAC;IAClD,CAACV,YAAY,CAACe,WAAW,GAAG,IAAIjB,KAAK,CAACO,IAAI,EAAEK,IAAI;GAChD;AACF,CAAC;AAED,OAAO,MAAMM,uBAAuB,GAAIC,QAAmB,IAAY;EACtE,OAAOf,qBAAqB,CAC3BH,CAAC,CAACmB,OAAO,CAACD,QAAQ,EAAGE,OAAO,IAAI;IAC/B,OAAOA,OAAO,CAACC,SAAS,EAAE;EAC3B,CAAC,CAAC,CACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}