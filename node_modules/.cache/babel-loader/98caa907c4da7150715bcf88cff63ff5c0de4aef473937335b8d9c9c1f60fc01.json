{"ast":null,"code":"import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Toolkit } from '@projectstorm/react-canvas-core';\nexport class PortWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n  report() {\n    this.props.port.updateCoords(this.props.engine.getPortCoords(this.props.port, this.ref.current));\n  }\n  componentWillUnmount() {\n    this.engineListenerHandle && this.engineListenerHandle.deregister();\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (!this.props.port.reportedPosition) {\n      this.report();\n    }\n  }\n  componentDidMount() {\n    this.engineListenerHandle = this.props.engine.registerListener({\n      canvasReady: () => {\n        this.report();\n      }\n    });\n    if (this.props.engine.getCanvas()) {\n      this.report();\n    }\n  }\n  getExtraProps() {\n    if (Toolkit.TESTING) {\n      const links = _.keys(this.props.port.getNode().getPort(this.props.port.getName()).links).join(',');\n      return {\n        'data-links': links\n      };\n    }\n    return {};\n  }\n  render() {\n    return React.createElement(\"div\", Object.assign({\n      style: this.props.style,\n      ref: this.ref,\n      className: `port ${this.props.className || ''}`,\n      \"data-name\": this.props.port.getName(),\n      \"data-nodeid\": this.props.port.getNode().getID()\n    }, this.getExtraProps()), this.props.children);\n  }\n}","map":{"version":3,"names":["React","_","Toolkit","PortWidget","Component","constructor","props","ref","createRef","report","port","updateCoords","engine","getPortCoords","current","componentWillUnmount","engineListenerHandle","deregister","componentDidUpdate","prevProps","prevState","snapshot","reportedPosition","componentDidMount","registerListener","canvasReady","getCanvas","getExtraProps","TESTING","links","keys","getNode","getPort","getName","join","render","createElement","Object","assign","style","className","getID","children"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\port\\PortWidget.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { PortModel } from './PortModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { ListenerHandle, Toolkit } from '@projectstorm/react-canvas-core';\n\nexport interface PortProps {\n\tport: PortModel;\n\tengine: DiagramEngine;\n\tclassName?;\n\tstyle?;\n}\n\nexport class PortWidget extends React.Component<React.PropsWithChildren<PortProps>> {\n\tref: React.RefObject<HTMLDivElement>;\n\tengineListenerHandle: ListenerHandle;\n\n\tconstructor(props: PortProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\treport() {\n\t\tthis.props.port.updateCoords(this.props.engine.getPortCoords(this.props.port, this.ref.current));\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.engineListenerHandle && this.engineListenerHandle.deregister();\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<PortProps>, prevState, snapshot?: any): void {\n\t\tif (!this.props.port.reportedPosition) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis.engineListenerHandle = this.props.engine.registerListener({\n\t\t\tcanvasReady: () => {\n\t\t\t\tthis.report();\n\t\t\t}\n\t\t});\n\t\tif (this.props.engine.getCanvas()) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tgetExtraProps() {\n\t\tif (Toolkit.TESTING) {\n\t\t\tconst links = _.keys(this.props.port.getNode().getPort(this.props.port.getName()).links).join(',');\n\t\t\treturn {\n\t\t\t\t'data-links': links\n\t\t\t};\n\t\t}\n\t\treturn {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={this.props.style}\n\t\t\t\tref={this.ref}\n\t\t\t\tclassName={`port ${this.props.className || ''}`}\n\t\t\t\tdata-name={this.props.port.getName()}\n\t\t\t\tdata-nodeid={this.props.port.getNode().getID()}\n\t\t\t\t{...this.getExtraProps()}\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t);\n\t}\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAKC,CAAC,MAAM,QAAQ;AAG3B,SAAyBC,OAAO,QAAQ,iCAAiC;AASzE,OAAM,MAAOC,UAAW,SAAQH,KAAK,CAACI,SAA6C;EAIlFC,YAAYC,KAAgB;IAC3B,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,GAAG,GAAGP,KAAK,CAACQ,SAAS,EAAE;EAC7B;EAEAC,MAAMA,CAAA;IACL,IAAI,CAACH,KAAK,CAACI,IAAI,CAACC,YAAY,CAAC,IAAI,CAACL,KAAK,CAACM,MAAM,CAACC,aAAa,CAAC,IAAI,CAACP,KAAK,CAACI,IAAI,EAAE,IAAI,CAACH,GAAG,CAACO,OAAO,CAAC,CAAC;EACjG;EAEAC,oBAAoBA,CAAA;IACnB,IAAI,CAACC,oBAAoB,IAAI,IAAI,CAACA,oBAAoB,CAACC,UAAU,EAAE;EACpE;EAEAC,kBAAkBA,CAACC,SAA8B,EAAEC,SAAS,EAAEC,QAAc;IAC3E,IAAI,CAAC,IAAI,CAACf,KAAK,CAACI,IAAI,CAACY,gBAAgB,EAAE;MACtC,IAAI,CAACb,MAAM,EAAE;;EAEf;EAEAc,iBAAiBA,CAAA;IAChB,IAAI,CAACP,oBAAoB,GAAG,IAAI,CAACV,KAAK,CAACM,MAAM,CAACY,gBAAgB,CAAC;MAC9DC,WAAW,EAAEA,CAAA,KAAK;QACjB,IAAI,CAAChB,MAAM,EAAE;MACd;KACA,CAAC;IACF,IAAI,IAAI,CAACH,KAAK,CAACM,MAAM,CAACc,SAAS,EAAE,EAAE;MAClC,IAAI,CAACjB,MAAM,EAAE;;EAEf;EAEAkB,aAAaA,CAAA;IACZ,IAAIzB,OAAO,CAAC0B,OAAO,EAAE;MACpB,MAAMC,KAAK,GAAG5B,CAAC,CAAC6B,IAAI,CAAC,IAAI,CAACxB,KAAK,CAACI,IAAI,CAACqB,OAAO,EAAE,CAACC,OAAO,CAAC,IAAI,CAAC1B,KAAK,CAACI,IAAI,CAACuB,OAAO,EAAE,CAAC,CAACJ,KAAK,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC;MAClG,OAAO;QACN,YAAY,EAAEL;OACd;;IAEF,OAAO,EAAE;EACV;EAEAM,MAAMA,CAAA;IACL,OACCnC,KAAA,CAAAoC,aAAA,QAAAC,MAAA,CAAAC,MAAA;MACCC,KAAK,EAAE,IAAI,CAACjC,KAAK,CAACiC,KAAK;MACvBhC,GAAG,EAAE,IAAI,CAACA,GAAG;MACbiC,SAAS,EAAE,QAAQ,IAAI,CAAClC,KAAK,CAACkC,SAAS,IAAI,EAAE,EAAE;MAAA,aACpC,IAAI,CAAClC,KAAK,CAACI,IAAI,CAACuB,OAAO,EAAE;MAAA,eACvB,IAAI,CAAC3B,KAAK,CAACI,IAAI,CAACqB,OAAO,EAAE,CAACU,KAAK;IAAE,GAC1C,IAAI,CAACd,aAAa,EAAE,GAEvB,IAAI,CAACrB,KAAK,CAACoC,QAAQ,CACf;EAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}