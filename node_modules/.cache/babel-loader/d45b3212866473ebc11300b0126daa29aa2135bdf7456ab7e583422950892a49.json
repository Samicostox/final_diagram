{"ast":null,"code":"import * as _ from 'lodash';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport { BasePositionModel } from '@projectstorm/react-canvas-core';\nexport var PortModelAlignment;\n(function (PortModelAlignment) {\n  PortModelAlignment[\"TOP\"] = \"top\";\n  PortModelAlignment[\"LEFT\"] = \"left\";\n  PortModelAlignment[\"BOTTOM\"] = \"bottom\";\n  PortModelAlignment[\"RIGHT\"] = \"right\";\n})(PortModelAlignment || (PortModelAlignment = {}));\nexport class PortModel extends BasePositionModel {\n  constructor(options) {\n    super(options);\n    this.links = {};\n    this.reportedPosition = false;\n  }\n  deserialize(event) {\n    super.deserialize(event);\n    this.reportedPosition = false;\n    this.options.name = event.data.name;\n    this.options.alignment = event.data.alignment;\n  }\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      name: this.options.name,\n      alignment: this.options.alignment,\n      parentNode: this.parent.getID(),\n      links: _.map(this.links, link => {\n        return link.getID();\n      })\n    });\n  }\n  setPosition(x, y) {\n    let old = this.position;\n    super.setPosition(x, y);\n    _.forEach(this.getLinks(), link => {\n      let point = link.getPointForPort(this);\n      point.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n    });\n  }\n  doClone(lookupTable = {}, clone) {\n    clone.links = {};\n    clone.parent = this.getParent().clone(lookupTable);\n  }\n  getNode() {\n    return this.getParent();\n  }\n  getName() {\n    return this.options.name;\n  }\n  getMaximumLinks() {\n    return this.options.maximumLinks;\n  }\n  setMaximumLinks(maximumLinks) {\n    this.options.maximumLinks = maximumLinks;\n  }\n  removeLink(link) {\n    delete this.links[link.getID()];\n  }\n  addLink(link) {\n    this.links[link.getID()] = link;\n  }\n  getLinks() {\n    return this.links;\n  }\n  createLinkModel() {\n    if (_.isFinite(this.options.maximumLinks)) {\n      var numberOfLinks = _.size(this.links);\n      if (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n        return _.values(this.links)[0];\n      } else if (numberOfLinks >= this.options.maximumLinks) {\n        return null;\n      }\n    }\n    return null;\n  }\n  reportPosition() {\n    _.forEach(this.getLinks(), link => {\n      link.getPointForPort(this).setPosition(this.getCenter());\n    });\n    this.fireEvent({\n      entity: this\n    }, 'reportInitialPosition');\n  }\n  getCenter() {\n    return new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n  }\n  getBoundingBox() {\n    return Rectangle.fromPointAndSize(this.position, this.width, this.height);\n  }\n  updateCoords(coords) {\n    this.width = coords.getWidth();\n    this.height = coords.getHeight();\n    this.setPosition(coords.getTopLeft());\n    this.reportedPosition = true;\n    this.reportPosition();\n  }\n  canLinkToPort(port) {\n    return true;\n  }\n  isLocked() {\n    return super.isLocked() || this.getParent().isLocked();\n  }\n}","map":{"version":3,"names":["_","Point","Rectangle","BasePositionModel","PortModelAlignment","PortModel","constructor","options","links","reportedPosition","deserialize","event","name","data","alignment","serialize","Object","assign","parentNode","parent","getID","map","link","setPosition","x","y","old","position","forEach","getLinks","point","getPointForPort","getX","getY","doClone","lookupTable","clone","getParent","getNode","getName","getMaximumLinks","maximumLinks","setMaximumLinks","removeLink","addLink","createLinkModel","isFinite","numberOfLinks","size","values","reportPosition","getCenter","fireEvent","entity","width","height","getBoundingBox","fromPointAndSize","updateCoords","coords","getWidth","getHeight","getTopLeft","canLinkToPort","port","isLocked"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\port\\PortModel.ts"],"sourcesContent":["import { NodeModel } from '../node/NodeModel';\nimport { LinkModel } from '../link/LinkModel';\nimport * as _ from 'lodash';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelOptions,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tBasePositionModelListener,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\n\nexport enum PortModelAlignment {\n\tTOP = 'top',\n\tLEFT = 'left',\n\tBOTTOM = 'bottom',\n\tRIGHT = 'right'\n}\n\nexport interface PortModelListener extends BasePositionModelListener {\n\t/**\n\t * fires when it first receives positional information\n\t */\n\treportInitialPosition?: (event: BaseEntityEvent<PortModel>) => void;\n}\n\nexport interface PortModelOptions extends BaseModelOptions {\n\talignment?: PortModelAlignment;\n\tmaximumLinks?: number;\n\tname: string;\n}\n\nexport interface PortModelGenerics extends BasePositionModelGenerics {\n\tOPTIONS: PortModelOptions;\n\tPARENT: NodeModel;\n\tLISTENER: PortModelListener;\n}\n\nexport class PortModel<G extends PortModelGenerics = PortModelGenerics> extends BasePositionModel<G> {\n\tlinks: { [id: string]: LinkModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\treportedPosition: boolean;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.links = {};\n\t\tthis.reportedPosition = false;\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.reportedPosition = false;\n\t\tthis.options.name = event.data.name;\n\t\tthis.options.alignment = event.data.alignment;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.options.name,\n\t\t\talignment: this.options.alignment,\n\t\t\tparentNode: this.parent.getID(),\n\t\t\tlinks: _.map(this.links, (link) => {\n\t\t\t\treturn link.getID();\n\t\t\t})\n\t\t};\n\t}\n\n\tsetPosition(point: Point);\n\tsetPosition(x: number, y: number);\n\tsetPosition(x, y?) {\n\t\tlet old = this.position;\n\t\tsuper.setPosition(x, y);\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlet point = link.getPointForPort(this);\n\t\t\tpoint.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone: PortModel) {\n\t\tclone.links = {};\n\t\tclone.parent = this.getParent().clone(lookupTable);\n\t}\n\n\tgetNode(): NodeModel {\n\t\treturn this.getParent();\n\t}\n\n\tgetName(): string {\n\t\treturn this.options.name;\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.options.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.options.maximumLinks = maximumLinks;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tdelete this.links[link.getID()];\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis.links[link.getID()] = link;\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tpublic createLinkModel(): LinkModel | null {\n\t\tif (_.isFinite(this.options.maximumLinks)) {\n\t\t\tvar numberOfLinks: number = _.size(this.links);\n\t\t\tif (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n\t\t\t\treturn _.values(this.links)[0];\n\t\t\t} else if (numberOfLinks >= this.options.maximumLinks) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\treportPosition() {\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlink.getPointForPort(this).setPosition(this.getCenter());\n\t\t});\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tentity: this\n\t\t\t},\n\t\t\t'reportInitialPosition'\n\t\t);\n\t}\n\n\tgetCenter(): Point {\n\t\treturn new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn Rectangle.fromPointAndSize(this.position, this.width, this.height);\n\t}\n\n\tupdateCoords(coords: Rectangle) {\n\t\tthis.width = coords.getWidth();\n\t\tthis.height = coords.getHeight();\n\t\tthis.setPosition(coords.getTopLeft());\n\t\tthis.reportedPosition = true;\n\t\tthis.reportPosition();\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,QAAQ;AAC3B,SAASC,KAAK,EAAEC,SAAS,QAAQ,wBAAwB;AACzD,SAGCC,iBAAiB,QAIX,iCAAiC;AAExC,WAAYC,kBAKX;AALD,WAAYA,kBAAkB;EAC7BA,kBAAA,eAAW;EACXA,kBAAA,iBAAa;EACbA,kBAAA,qBAAiB;EACjBA,kBAAA,mBAAe;AAChB,CAAC,EALWA,kBAAkB,KAAlBA,kBAAkB;AA0B9B,OAAM,MAAOC,SAA2D,SAAQF,iBAAoB;EAQnGG,YAAYC,OAAqB;IAChC,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,gBAAgB,GAAG,KAAK;EAC9B;EAEAC,WAAWA,CAACC,KAA6B;IACxC,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IACxB,IAAI,CAACF,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACF,OAAO,CAACK,IAAI,GAAGD,KAAK,CAACE,IAAI,CAACD,IAAI;IACnC,IAAI,CAACL,OAAO,CAACO,SAAS,GAAGH,KAAK,CAACE,IAAI,CAACC,SAAS;EAC9C;EAEAC,SAASA,CAAA;IACR,OAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACI,KAAK,CAACF,SAAS,EAAE;MACpBH,IAAI,EAAE,IAAI,CAACL,OAAO,CAACK,IAAI;MACvBE,SAAS,EAAE,IAAI,CAACP,OAAO,CAACO,SAAS;MACjCI,UAAU,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,EAAE;MAC/BZ,KAAK,EAAER,CAAC,CAACqB,GAAG,CAAC,IAAI,CAACb,KAAK,EAAGc,IAAI,IAAI;QACjC,OAAOA,IAAI,CAACF,KAAK,EAAE;MACpB,CAAC;IAAC;EAEJ;EAIAG,WAAWA,CAACC,CAAC,EAAEC,CAAE;IAChB,IAAIC,GAAG,GAAG,IAAI,CAACC,QAAQ;IACvB,KAAK,CAACJ,WAAW,CAACC,CAAC,EAAEC,CAAC,CAAC;IACvBzB,CAAC,CAAC4B,OAAO,CAAC,IAAI,CAACC,QAAQ,EAAE,EAAGP,IAAI,IAAI;MACnC,IAAIQ,KAAK,GAAGR,IAAI,CAACS,eAAe,CAAC,IAAI,CAAC;MACtCD,KAAK,CAACP,WAAW,CAACO,KAAK,CAACE,IAAI,EAAE,GAAGR,CAAC,GAAGE,GAAG,CAACF,CAAC,EAAEM,KAAK,CAACG,IAAI,EAAE,GAAGR,CAAC,GAAGC,GAAG,CAACD,CAAC,CAAC;IACtE,CAAC,CAAC;EACH;EAEAS,OAAOA,CAACC,WAAW,GAAG,EAAE,EAAEC,KAAgB;IACzCA,KAAK,CAAC5B,KAAK,GAAG,EAAE;IAChB4B,KAAK,CAACjB,MAAM,GAAG,IAAI,CAACkB,SAAS,EAAE,CAACD,KAAK,CAACD,WAAW,CAAC;EACnD;EAEAG,OAAOA,CAAA;IACN,OAAO,IAAI,CAACD,SAAS,EAAE;EACxB;EAEAE,OAAOA,CAAA;IACN,OAAO,IAAI,CAAChC,OAAO,CAACK,IAAI;EACzB;EAEA4B,eAAeA,CAAA;IACd,OAAO,IAAI,CAACjC,OAAO,CAACkC,YAAY;EACjC;EAEAC,eAAeA,CAACD,YAAoB;IACnC,IAAI,CAAClC,OAAO,CAACkC,YAAY,GAAGA,YAAY;EACzC;EAEAE,UAAUA,CAACrB,IAAe;IACzB,OAAO,IAAI,CAACd,KAAK,CAACc,IAAI,CAACF,KAAK,EAAE,CAAC;EAChC;EAEAwB,OAAOA,CAACtB,IAAe;IACtB,IAAI,CAACd,KAAK,CAACc,IAAI,CAACF,KAAK,EAAE,CAAC,GAAGE,IAAI;EAChC;EAEAO,QAAQA,CAAA;IACP,OAAO,IAAI,CAACrB,KAAK;EAClB;EAEOqC,eAAeA,CAAA;IACrB,IAAI7C,CAAC,CAAC8C,QAAQ,CAAC,IAAI,CAACvC,OAAO,CAACkC,YAAY,CAAC,EAAE;MAC1C,IAAIM,aAAa,GAAW/C,CAAC,CAACgD,IAAI,CAAC,IAAI,CAACxC,KAAK,CAAC;MAC9C,IAAI,IAAI,CAACD,OAAO,CAACkC,YAAY,KAAK,CAAC,IAAIM,aAAa,IAAI,CAAC,EAAE;QAC1D,OAAO/C,CAAC,CAACiD,MAAM,CAAC,IAAI,CAACzC,KAAK,CAAC,CAAC,CAAC,CAAC;OAC9B,MAAM,IAAIuC,aAAa,IAAI,IAAI,CAACxC,OAAO,CAACkC,YAAY,EAAE;QACtD,OAAO,IAAI;;;IAGb,OAAO,IAAI;EACZ;EAEAS,cAAcA,CAAA;IACblD,CAAC,CAAC4B,OAAO,CAAC,IAAI,CAACC,QAAQ,EAAE,EAAGP,IAAI,IAAI;MACnCA,IAAI,CAACS,eAAe,CAAC,IAAI,CAAC,CAACR,WAAW,CAAC,IAAI,CAAC4B,SAAS,EAAE,CAAC;IACzD,CAAC,CAAC;IACF,IAAI,CAACC,SAAS,CACb;MACCC,MAAM,EAAE;KACR,EACD,uBAAuB,CACvB;EACF;EAEAF,SAASA,CAAA;IACR,OAAO,IAAIlD,KAAK,CAAC,IAAI,CAAC+B,IAAI,EAAE,GAAG,IAAI,CAACsB,KAAK,GAAG,CAAC,EAAE,IAAI,CAACrB,IAAI,EAAE,GAAG,IAAI,CAACsB,MAAM,GAAG,CAAC,CAAC;EAC9E;EAEAC,cAAcA,CAAA;IACb,OAAOtD,SAAS,CAACuD,gBAAgB,CAAC,IAAI,CAAC9B,QAAQ,EAAE,IAAI,CAAC2B,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;EAC1E;EAEAG,YAAYA,CAACC,MAAiB;IAC7B,IAAI,CAACL,KAAK,GAAGK,MAAM,CAACC,QAAQ,EAAE;IAC9B,IAAI,CAACL,MAAM,GAAGI,MAAM,CAACE,SAAS,EAAE;IAChC,IAAI,CAACtC,WAAW,CAACoC,MAAM,CAACG,UAAU,EAAE,CAAC;IACrC,IAAI,CAACrD,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACyC,cAAc,EAAE;EACtB;EAEAa,aAAaA,CAACC,IAAe;IAC5B,OAAO,IAAI;EACZ;EAEAC,QAAQA,CAAA;IACP,OAAO,KAAK,CAACA,QAAQ,EAAE,IAAI,IAAI,CAAC5B,SAAS,EAAE,CAAC4B,QAAQ,EAAE;EACvD"},"metadata":{},"sourceType":"module","externalDependencies":[]}