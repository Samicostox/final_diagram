{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samir\\\\Diagram gen\\\\diagram-sami\\\\src\\\\datamodeldiagram.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DataModelDiagram() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [nodeName, setNodeName] = useState('');\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const onNodeClick = useCallback((event, node) => {\n    setSelectedNode(node);\n    setNodeName(node.data.label);\n  }, []);\n  const updateNodeName = useCallback(() => {\n    setNodes(nds => nds.map(n => {\n      if (n.id === selectedNode.id) {\n        return {\n          ...n,\n          data: {\n            ...n.data,\n            label: nodeName\n          }\n        };\n      }\n      return n;\n    }));\n    setSelectedNode(null);\n    setNodeName('');\n  }, [nodeName, selectedNode, setNodes]);\n  const addNewNode = useCallback(() => {\n    const newNodeId = `node_${nodes.length + 1}`;\n    const newNode = {\n      id: newNodeId,\n      data: {\n        label: `Node ${nodes.length + 1}`\n      },\n      position: {\n        x: window.innerWidth / 2 - 100,\n        y: window.innerHeight / 2 - 50\n      } // Adjust for node size\n    };\n    setNodes(nds => nds.concat(newNode));\n    setSelectedNode(newNode);\n    setNodeName(newNode.data.label);\n  }, [nodes, setNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        zIndex: 4,\n        left: 10,\n        top: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: nodeName,\n        onChange: e => setNodeName(e.target.value),\n        onBlur: updateNodeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNewNode,\n      style: {\n        position: 'absolute',\n        left: 10,\n        bottom: 10,\n        zIndex: 4\n      },\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onNodeClick: onNodeClick,\n      onConnect: onConnect,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this);\n}\n_s(DataModelDiagram, \"ygjLYeNQ+b3/hucrgn2cddxuyZk=\", true);\n_c = DataModelDiagram;\nvar _c;\n$RefreshReg$(_c, \"DataModelDiagram\");","map":{"version":3,"names":["DataModelDiagram","_s","nodes","setNodes","onNodesChange","useNodesState","initialNodes","edges","setEdges","onEdgesChange","useEdgesState","initialEdges","selectedNode","setSelectedNode","useState","nodeName","setNodeName","onConnect","useCallback","params","eds","addEdge","onNodeClick","event","node","data","label","updateNodeName","nds","map","n","id","addNewNode","newNodeId","length","newNode","position","x","window","innerWidth","y","innerHeight","concat","_jsxDEV","style","width","height","children","zIndex","left","top","value","onChange","e","target","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","onClick","bottom","ReactFlow","Controls","MiniMap","Background","variant","gap","size","_c","$RefreshReg$"],"sources":["C:/Users/samir/Diagram gen/diagram-sami/src/datamodeldiagram.js"],"sourcesContent":["export default function DataModelDiagram() {\r\n    const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n    const [nodeName, setNodeName] = useState('');\r\n  \r\n    const onConnect = useCallback(\r\n      (params) => setEdges((eds) => addEdge(params, eds)),\r\n      [setEdges],\r\n    );\r\n  \r\n    const onNodeClick = useCallback((event, node) => {\r\n      setSelectedNode(node);\r\n      setNodeName(node.data.label);\r\n    }, []);\r\n  \r\n    const updateNodeName = useCallback(() => {\r\n      setNodes((nds) =>\r\n        nds.map((n) => {\r\n          if (n.id === selectedNode.id) {\r\n            return {\r\n              ...n,\r\n              data: { ...n.data, label: nodeName }\r\n            };\r\n          }\r\n          return n;\r\n        })\r\n      );\r\n      setSelectedNode(null);\r\n      setNodeName('');\r\n    }, [nodeName, selectedNode, setNodes]);\r\n  \r\n    const addNewNode = useCallback(() => {\r\n      const newNodeId = `node_${nodes.length + 1}`;\r\n      const newNode = {\r\n        id: newNodeId,\r\n        data: { label: `Node ${nodes.length + 1}` },\r\n        position: { x: window.innerWidth / 2 - 100, y: window.innerHeight / 2 - 50 } // Adjust for node size\r\n      };\r\n      setNodes((nds) => nds.concat(newNode));\r\n      setSelectedNode(newNode);\r\n      setNodeName(newNode.data.label);\r\n    }, [nodes, setNodes]);\r\n  \r\n    return (\r\n      <div style={{ width: '100vw', height: '100vh' }}>\r\n        {selectedNode && (\r\n          <div style={{ position: 'absolute', zIndex: 4, left: 10, top: 10 }}>\r\n            <input\r\n              value={nodeName}\r\n              onChange={(e) => setNodeName(e.target.value)}\r\n              onBlur={updateNodeName}\r\n            />\r\n          </div>\r\n        )}\r\n        <button\r\n          onClick={addNewNode}\r\n          style={{ position: 'absolute', left: 10, bottom: 10, zIndex: 4 }}\r\n        >\r\n          Add Node\r\n        </button>\r\n        <ReactFlow\r\n          nodes={nodes}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onNodeClick={onNodeClick}\r\n          onConnect={onConnect}\r\n        >\r\n          <Controls />\r\n          <MiniMap />\r\n          <Background variant=\"dots\" gap={12} size={1} />\r\n        </ReactFlow>\r\n      </div>\r\n    );\r\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}