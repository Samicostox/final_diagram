{"ast":null,"code":"var Heap = require('heap');\nvar Util = require('../core/Util');\nvar Heuristic = require('../core/Heuristic');\nvar DiagonalMovement = require('../core/DiagonalMovement');\n\n/**\r\n * A* path-finder. Based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching \r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\nfunction AStarFinder(opt) {\n  opt = opt || {};\n  this.allowDiagonal = opt.allowDiagonal;\n  this.dontCrossCorners = opt.dontCrossCorners;\n  this.heuristic = opt.heuristic || Heuristic.manhattan;\n  this.weight = opt.weight || 1;\n  this.diagonalMovement = opt.diagonalMovement;\n  if (!this.diagonalMovement) {\n    if (!this.allowDiagonal) {\n      this.diagonalMovement = DiagonalMovement.Never;\n    } else {\n      if (this.dontCrossCorners) {\n        this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\n      } else {\n        this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\n      }\n    }\n  }\n\n  // When diagonal movement is allowed the manhattan heuristic is not\n  //admissible. It should be octile instead\n  if (this.diagonalMovement === DiagonalMovement.Never) {\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\n  } else {\n    this.heuristic = opt.heuristic || Heuristic.octile;\n  }\n}\n\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\nAStarFinder.prototype.findPath = function (startX, startY, endX, endY, grid) {\n  var openList = new Heap(function (nodeA, nodeB) {\n      return nodeA.f - nodeB.f;\n    }),\n    startNode = grid.getNodeAt(startX, startY),\n    endNode = grid.getNodeAt(endX, endY),\n    heuristic = this.heuristic,\n    diagonalMovement = this.diagonalMovement,\n    weight = this.weight,\n    abs = Math.abs,\n    SQRT2 = Math.SQRT2,\n    node,\n    neighbors,\n    neighbor,\n    i,\n    l,\n    x,\n    y,\n    ng;\n\n  // set the `g` and `f` value of the start node to be 0\n  startNode.g = 0;\n  startNode.f = 0;\n\n  // push the start node into the open list\n  openList.push(startNode);\n  startNode.opened = true;\n\n  // while the open list is not empty\n  while (!openList.empty()) {\n    // pop the position of node which has the minimum `f` value.\n    node = openList.pop();\n    node.closed = true;\n\n    // if reached the end position, construct the path and return it\n    if (node === endNode) {\n      return Util.backtrace(endNode);\n    }\n\n    // get neigbours of the current node\n    neighbors = grid.getNeighbors(node, diagonalMovement);\n    for (i = 0, l = neighbors.length; i < l; ++i) {\n      neighbor = neighbors[i];\n      if (neighbor.closed) {\n        continue;\n      }\n      x = neighbor.x;\n      y = neighbor.y;\n\n      // get the distance between current node and the neighbor\n      // and calculate the next g score\n      ng = node.g + (x - node.x === 0 || y - node.y === 0 ? 1 : SQRT2);\n\n      // check if the neighbor has not been inspected yet, or\n      // can be reached with smaller cost from the current node\n      if (!neighbor.opened || ng < neighbor.g) {\n        neighbor.g = ng;\n        neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\n        neighbor.f = neighbor.g + neighbor.h;\n        neighbor.parent = node;\n        if (!neighbor.opened) {\n          openList.push(neighbor);\n          neighbor.opened = true;\n        } else {\n          // the neighbor can be reached with smaller cost.\n          // Since its f value has been updated, we have to\n          // update its position in the open list\n          openList.updateItem(neighbor);\n        }\n      }\n    } // end for each neighbor\n  } // end while not open list empty\n\n  // fail to find the path\n  return [];\n};\nmodule.exports = AStarFinder;","map":{"version":3,"names":["Heap","require","Util","Heuristic","DiagonalMovement","AStarFinder","opt","allowDiagonal","dontCrossCorners","heuristic","manhattan","weight","diagonalMovement","Never","OnlyWhenNoObstacles","IfAtMostOneObstacle","octile","prototype","findPath","startX","startY","endX","endY","grid","openList","nodeA","nodeB","f","startNode","getNodeAt","endNode","abs","Math","SQRT2","node","neighbors","neighbor","i","l","x","y","ng","g","push","opened","empty","pop","closed","backtrace","getNeighbors","length","h","parent","updateItem","module","exports"],"sources":["C:/Users/samir/Diagram gen/diagram-sami/node_modules/pathfinding/src/finders/AStarFinder.js"],"sourcesContent":["var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder. Based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching \r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction AStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    //admissible. It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        // if reached the end position, construct the path and return it\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    openList.push(neighbor);\r\n                    neighbor.opened = true;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    openList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = AStarFinder;\r\n"],"mappings":"AAAA,IAAIA,IAAI,GAASC,OAAO,CAAC,MAAM,CAAC;AAChC,IAAIC,IAAI,GAASD,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIE,SAAS,GAAIF,OAAO,CAAC,mBAAmB,CAAC;AAC7C,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,0BAA0B,CAAC;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,WAAWA,CAACC,GAAG,EAAE;EACtBA,GAAG,GAAGA,GAAG,IAAI,CAAC,CAAC;EACf,IAAI,CAACC,aAAa,GAAGD,GAAG,CAACC,aAAa;EACtC,IAAI,CAACC,gBAAgB,GAAGF,GAAG,CAACE,gBAAgB;EAC5C,IAAI,CAACC,SAAS,GAAGH,GAAG,CAACG,SAAS,IAAIN,SAAS,CAACO,SAAS;EACrD,IAAI,CAACC,MAAM,GAAGL,GAAG,CAACK,MAAM,IAAI,CAAC;EAC7B,IAAI,CAACC,gBAAgB,GAAGN,GAAG,CAACM,gBAAgB;EAE5C,IAAI,CAAC,IAAI,CAACA,gBAAgB,EAAE;IACxB,IAAI,CAAC,IAAI,CAACL,aAAa,EAAE;MACrB,IAAI,CAACK,gBAAgB,GAAGR,gBAAgB,CAACS,KAAK;IAClD,CAAC,MAAM;MACH,IAAI,IAAI,CAACL,gBAAgB,EAAE;QACvB,IAAI,CAACI,gBAAgB,GAAGR,gBAAgB,CAACU,mBAAmB;MAChE,CAAC,MAAM;QACH,IAAI,CAACF,gBAAgB,GAAGR,gBAAgB,CAACW,mBAAmB;MAChE;IACJ;EACJ;;EAEA;EACA;EACA,IAAI,IAAI,CAACH,gBAAgB,KAAKR,gBAAgB,CAACS,KAAK,EAAE;IAClD,IAAI,CAACJ,SAAS,GAAGH,GAAG,CAACG,SAAS,IAAIN,SAAS,CAACO,SAAS;EACzD,CAAC,MAAM;IACH,IAAI,CAACD,SAAS,GAAGH,GAAG,CAACG,SAAS,IAAIN,SAAS,CAACa,MAAM;EACtD;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACAX,WAAW,CAACY,SAAS,CAACC,QAAQ,GAAG,UAASC,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;EACxE,IAAIC,QAAQ,GAAG,IAAIxB,IAAI,CAAC,UAASyB,KAAK,EAAEC,KAAK,EAAE;MACvC,OAAOD,KAAK,CAACE,CAAC,GAAGD,KAAK,CAACC,CAAC;IAC5B,CAAC,CAAC;IACFC,SAAS,GAAGL,IAAI,CAACM,SAAS,CAACV,MAAM,EAAEC,MAAM,CAAC;IAC1CU,OAAO,GAAGP,IAAI,CAACM,SAAS,CAACR,IAAI,EAAEC,IAAI,CAAC;IACpCb,SAAS,GAAG,IAAI,CAACA,SAAS;IAC1BG,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;IACxCD,MAAM,GAAG,IAAI,CAACA,MAAM;IACpBoB,GAAG,GAAGC,IAAI,CAACD,GAAG;IAAEE,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClCC,IAAI;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAEC,EAAE;;EAE7C;EACAb,SAAS,CAACc,CAAC,GAAG,CAAC;EACfd,SAAS,CAACD,CAAC,GAAG,CAAC;;EAEf;EACAH,QAAQ,CAACmB,IAAI,CAACf,SAAS,CAAC;EACxBA,SAAS,CAACgB,MAAM,GAAG,IAAI;;EAEvB;EACA,OAAO,CAACpB,QAAQ,CAACqB,KAAK,CAAC,CAAC,EAAE;IACtB;IACAX,IAAI,GAAGV,QAAQ,CAACsB,GAAG,CAAC,CAAC;IACrBZ,IAAI,CAACa,MAAM,GAAG,IAAI;;IAElB;IACA,IAAIb,IAAI,KAAKJ,OAAO,EAAE;MAClB,OAAO5B,IAAI,CAAC8C,SAAS,CAAClB,OAAO,CAAC;IAClC;;IAEA;IACAK,SAAS,GAAGZ,IAAI,CAAC0B,YAAY,CAACf,IAAI,EAAEtB,gBAAgB,CAAC;IACrD,KAAKyB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGH,SAAS,CAACe,MAAM,EAAEb,CAAC,GAAGC,CAAC,EAAE,EAAED,CAAC,EAAE;MAC1CD,QAAQ,GAAGD,SAAS,CAACE,CAAC,CAAC;MAEvB,IAAID,QAAQ,CAACW,MAAM,EAAE;QACjB;MACJ;MAEAR,CAAC,GAAGH,QAAQ,CAACG,CAAC;MACdC,CAAC,GAAGJ,QAAQ,CAACI,CAAC;;MAEd;MACA;MACAC,EAAE,GAAGP,IAAI,CAACQ,CAAC,IAAKH,CAAC,GAAGL,IAAI,CAACK,CAAC,KAAK,CAAC,IAAIC,CAAC,GAAGN,IAAI,CAACM,CAAC,KAAK,CAAC,GAAI,CAAC,GAAGP,KAAK,CAAC;;MAElE;MACA;MACA,IAAI,CAACG,QAAQ,CAACQ,MAAM,IAAIH,EAAE,GAAGL,QAAQ,CAACM,CAAC,EAAE;QACrCN,QAAQ,CAACM,CAAC,GAAGD,EAAE;QACfL,QAAQ,CAACe,CAAC,GAAGf,QAAQ,CAACe,CAAC,IAAIxC,MAAM,GAAGF,SAAS,CAACsB,GAAG,CAACQ,CAAC,GAAGlB,IAAI,CAAC,EAAEU,GAAG,CAACS,CAAC,GAAGlB,IAAI,CAAC,CAAC;QAC3Ec,QAAQ,CAACT,CAAC,GAAGS,QAAQ,CAACM,CAAC,GAAGN,QAAQ,CAACe,CAAC;QACpCf,QAAQ,CAACgB,MAAM,GAAGlB,IAAI;QAEtB,IAAI,CAACE,QAAQ,CAACQ,MAAM,EAAE;UAClBpB,QAAQ,CAACmB,IAAI,CAACP,QAAQ,CAAC;UACvBA,QAAQ,CAACQ,MAAM,GAAG,IAAI;QAC1B,CAAC,MAAM;UACH;UACA;UACA;UACApB,QAAQ,CAAC6B,UAAU,CAACjB,QAAQ,CAAC;QACjC;MACJ;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;;EAEF;EACA,OAAO,EAAE;AACb,CAAC;AAEDkB,MAAM,CAACC,OAAO,GAAGlD,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}