{"ast":null,"code":"import { InputType } from './Action';\nimport * as _ from 'lodash';\nexport class ActionEventBus {\n  constructor(engine) {\n    this.actions = {};\n    this.engine = engine;\n    this.keys = {};\n  }\n  getKeys() {\n    return _.keys(this.keys);\n  }\n  registerAction(action) {\n    action.setEngine(this.engine);\n    this.actions[action.id] = action;\n    return () => {\n      this.deregisterAction(action);\n    };\n  }\n  deregisterAction(action) {\n    action.setEngine(null);\n    delete this.actions[action.id];\n  }\n  getActionsForType(type) {\n    return _.filter(this.actions, action => {\n      return action.options.type === type;\n    });\n  }\n  getModelForEvent(actionEvent) {\n    if (actionEvent.model) {\n      return actionEvent.model;\n    }\n    return this.engine.getMouseElement(actionEvent.event);\n  }\n  getActionsForEvent(actionEvent) {\n    const {\n      event\n    } = actionEvent;\n    if (event.type === 'mousedown') {\n      return this.getActionsForType(InputType.MOUSE_DOWN);\n    } else if (event.type === 'mouseup') {\n      return this.getActionsForType(InputType.MOUSE_UP);\n    } else if (event.type === 'keydown') {\n      // store the recorded key\n      this.keys[event.key.toLowerCase()] = true;\n      return this.getActionsForType(InputType.KEY_DOWN);\n    } else if (event.type === 'keyup') {\n      // delete the recorded key\n      delete this.keys[event.key.toLowerCase()];\n      return this.getActionsForType(InputType.KEY_UP);\n    } else if (event.type === 'mousemove') {\n      return this.getActionsForType(InputType.MOUSE_MOVE);\n    } else if (event.type === 'wheel') {\n      return this.getActionsForType(InputType.MOUSE_WHEEL);\n    } else if (event.type === 'touchstart') {\n      return this.getActionsForType(InputType.TOUCH_START);\n    } else if (event.type === 'touchend') {\n      return this.getActionsForType(InputType.TOUCH_END);\n    } else if (event.type === 'touchmove') {\n      return this.getActionsForType(InputType.TOUCH_MOVE);\n    }\n    return [];\n  }\n  fireAction(actionEvent) {\n    const actions = this.getActionsForEvent(actionEvent);\n    for (let action of actions) {\n      action.options.fire(actionEvent);\n    }\n  }\n}","map":{"version":3,"names":["InputType","_","ActionEventBus","constructor","engine","actions","keys","getKeys","registerAction","action","setEngine","id","deregisterAction","getActionsForType","type","filter","options","getModelForEvent","actionEvent","model","getMouseElement","event","getActionsForEvent","MOUSE_DOWN","MOUSE_UP","key","toLowerCase","KEY_DOWN","KEY_UP","MOUSE_MOVE","MOUSE_WHEEL","TOUCH_START","TOUCH_END","TOUCH_MOVE","fireAction","fire"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-canvas-core\\src\\core-actions\\ActionEventBus.ts"],"sourcesContent":["import { Action, ActionEvent, InputType } from './Action';\nimport { KeyboardEvent, MouseEvent } from 'react';\nimport * as _ from 'lodash';\nimport { CanvasEngine } from '../CanvasEngine';\nimport { BaseModel } from '../core-models/BaseModel';\n\nexport class ActionEventBus {\n\tprotected actions: { [id: string]: Action };\n\tprotected engine: CanvasEngine;\n\tprotected keys: { [key: string]: boolean };\n\n\tconstructor(engine: CanvasEngine) {\n\t\tthis.actions = {};\n\t\tthis.engine = engine;\n\t\tthis.keys = {};\n\t}\n\n\tgetKeys(): string[] {\n\t\treturn _.keys(this.keys);\n\t}\n\n\tregisterAction(action: Action): () => void {\n\t\taction.setEngine(this.engine);\n\t\tthis.actions[action.id] = action;\n\t\treturn () => {\n\t\t\tthis.deregisterAction(action);\n\t\t};\n\t}\n\n\tderegisterAction(action: Action) {\n\t\taction.setEngine(null);\n\t\tdelete this.actions[action.id];\n\t}\n\n\tgetActionsForType(type: InputType): Action[] {\n\t\treturn _.filter(this.actions, (action) => {\n\t\t\treturn action.options.type === type;\n\t\t});\n\t}\n\n\tgetModelForEvent(actionEvent: ActionEvent<MouseEvent>): BaseModel {\n\t\tif (actionEvent.model) {\n\t\t\treturn actionEvent.model;\n\t\t}\n\t\treturn this.engine.getMouseElement(actionEvent.event);\n\t}\n\n\tgetActionsForEvent(actionEvent: ActionEvent): Action[] {\n\t\tconst { event } = actionEvent;\n\t\tif (event.type === 'mousedown') {\n\t\t\treturn this.getActionsForType(InputType.MOUSE_DOWN);\n\t\t} else if (event.type === 'mouseup') {\n\t\t\treturn this.getActionsForType(InputType.MOUSE_UP);\n\t\t} else if (event.type === 'keydown') {\n\t\t\t// store the recorded key\n\t\t\tthis.keys[(event as KeyboardEvent).key.toLowerCase()] = true;\n\t\t\treturn this.getActionsForType(InputType.KEY_DOWN);\n\t\t} else if (event.type === 'keyup') {\n\t\t\t// delete the recorded key\n\t\t\tdelete this.keys[(event as KeyboardEvent).key.toLowerCase()];\n\t\t\treturn this.getActionsForType(InputType.KEY_UP);\n\t\t} else if (event.type === 'mousemove') {\n\t\t\treturn this.getActionsForType(InputType.MOUSE_MOVE);\n\t\t} else if (event.type === 'wheel') {\n\t\t\treturn this.getActionsForType(InputType.MOUSE_WHEEL);\n\t\t} else if (event.type === 'touchstart') {\n\t\t\treturn this.getActionsForType(InputType.TOUCH_START);\n\t\t} else if (event.type === 'touchend') {\n\t\t\treturn this.getActionsForType(InputType.TOUCH_END);\n\t\t} else if (event.type === 'touchmove') {\n\t\t\treturn this.getActionsForType(InputType.TOUCH_MOVE);\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tfireAction(actionEvent: ActionEvent) {\n\t\tconst actions = this.getActionsForEvent(actionEvent);\n\t\tfor (let action of actions) {\n\t\t\taction.options.fire(actionEvent as any);\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}