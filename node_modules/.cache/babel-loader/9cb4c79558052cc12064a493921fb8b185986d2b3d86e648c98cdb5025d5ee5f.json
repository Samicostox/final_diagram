{"ast":null,"code":"import { PortModel, PortModelAlignment } from '@projectstorm/react-diagrams-core';\nimport { DefaultLinkModel } from '../link/DefaultLinkModel';\nexport class DefaultPortModel extends PortModel {\n  constructor(options, name, label) {\n    if (!!name) {\n      options = {\n        in: !!options,\n        name: name,\n        label: label\n      };\n    }\n    options = options;\n    super(Object.assign({\n      label: options.label || options.name,\n      alignment: options.in ? PortModelAlignment.LEFT : PortModelAlignment.RIGHT,\n      type: 'default'\n    }, options));\n  }\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.in = event.data.in;\n    this.options.label = event.data.label;\n  }\n  serialize() {\n    return Object.assign(Object.assign({}, super.serialize()), {\n      in: this.options.in,\n      label: this.options.label\n    });\n  }\n  link(port, factory) {\n    let link = this.createLinkModel(factory);\n    link.setSourcePort(this);\n    link.setTargetPort(port);\n    return link;\n  }\n  canLinkToPort(port) {\n    if (port instanceof DefaultPortModel) {\n      return this.options.in !== port.getOptions().in;\n    }\n    return true;\n  }\n  createLinkModel(factory) {\n    let link = super.createLinkModel();\n    if (!link && factory) {\n      return factory.generateModel({});\n    }\n    return link || new DefaultLinkModel();\n  }\n}","map":{"version":3,"names":["PortModel","PortModelAlignment","DefaultLinkModel","DefaultPortModel","constructor","options","name","label","in","Object","assign","alignment","LEFT","RIGHT","type","deserialize","event","data","serialize","link","port","factory","createLinkModel","setSourcePort","setTargetPort","canLinkToPort","getOptions","generateModel"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-diagrams-defaults\\src\\port\\DefaultPortModel.ts"],"sourcesContent":["import {\n\tLinkModel,\n\tPortModel,\n\tPortModelAlignment,\n\tPortModelGenerics,\n\tPortModelOptions\n} from '@projectstorm/react-diagrams-core';\nimport { DefaultLinkModel } from '../link/DefaultLinkModel';\nimport { AbstractModelFactory, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface DefaultPortModelOptions extends PortModelOptions {\n\tlabel?: string;\n\tin?: boolean;\n\ttype?: string;\n}\n\nexport interface DefaultPortModelGenerics extends PortModelGenerics {\n\tOPTIONS: DefaultPortModelOptions;\n}\n\nexport class DefaultPortModel extends PortModel<DefaultPortModelGenerics> {\n\tconstructor(isIn: boolean, name?: string, label?: string);\n\tconstructor(options: DefaultPortModelOptions);\n\tconstructor(options: DefaultPortModelOptions | boolean, name?: string, label?: string) {\n\t\tif (!!name) {\n\t\t\toptions = {\n\t\t\t\tin: !!options,\n\t\t\t\tname: name,\n\t\t\t\tlabel: label\n\t\t\t};\n\t\t}\n\t\toptions = options as DefaultPortModelOptions;\n\t\tsuper({\n\t\t\tlabel: options.label || options.name,\n\t\t\talignment: options.in ? PortModelAlignment.LEFT : PortModelAlignment.RIGHT,\n\t\t\ttype: 'default',\n\t\t\t...options\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.in = event.data.in;\n\t\tthis.options.label = event.data.label;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tin: this.options.in,\n\t\t\tlabel: this.options.label\n\t\t};\n\t}\n\n\tlink<T extends LinkModel>(port: PortModel, factory?: AbstractModelFactory<T>): T {\n\t\tlet link = this.createLinkModel(factory);\n\t\tlink.setSourcePort(this);\n\t\tlink.setTargetPort(port);\n\t\treturn link as T;\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\tif (port instanceof DefaultPortModel) {\n\t\t\treturn this.options.in !== port.getOptions().in;\n\t\t}\n\t\treturn true;\n\t}\n\n\tcreateLinkModel(factory?: AbstractModelFactory<LinkModel>): LinkModel {\n\t\tlet link = super.createLinkModel();\n\t\tif (!link && factory) {\n\t\t\treturn factory.generateModel({});\n\t\t}\n\t\treturn link || new DefaultLinkModel();\n\t}\n}\n"],"mappings":"AAAA,SAECA,SAAS,EACTC,kBAAkB,QAGZ,mCAAmC;AAC1C,SAASC,gBAAgB,QAAQ,0BAA0B;AAa3D,OAAM,MAAOC,gBAAiB,SAAQH,SAAmC;EAGxEI,YAAYC,OAA0C,EAAEC,IAAa,EAAEC,KAAc;IACpF,IAAI,CAAC,CAACD,IAAI,EAAE;MACXD,OAAO,GAAG;QACTG,EAAE,EAAE,CAAC,CAACH,OAAO;QACbC,IAAI,EAAEA,IAAI;QACVC,KAAK,EAAEA;OACP;;IAEFF,OAAO,GAAGA,OAAkC;IAC5C,KAAK,CAAAI,MAAA,CAAAC,MAAA;MACJH,KAAK,EAAEF,OAAO,CAACE,KAAK,IAAIF,OAAO,CAACC,IAAI;MACpCK,SAAS,EAAEN,OAAO,CAACG,EAAE,GAAGP,kBAAkB,CAACW,IAAI,GAAGX,kBAAkB,CAACY,KAAK;MAC1EC,IAAI,EAAE;IAAS,GACZT,OAAO,EACT;EACH;EAEAU,WAAWA,CAACC,KAA6B;IACxC,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IACxB,IAAI,CAACX,OAAO,CAACG,EAAE,GAAGQ,KAAK,CAACC,IAAI,CAACT,EAAE;IAC/B,IAAI,CAACH,OAAO,CAACE,KAAK,GAAGS,KAAK,CAACC,IAAI,CAACV,KAAK;EACtC;EAEAW,SAASA,CAAA;IACR,OAAAT,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACI,KAAK,CAACQ,SAAS,EAAE;MACpBV,EAAE,EAAE,IAAI,CAACH,OAAO,CAACG,EAAE;MACnBD,KAAK,EAAE,IAAI,CAACF,OAAO,CAACE;IAAK;EAE3B;EAEAY,IAAIA,CAAsBC,IAAe,EAAEC,OAAiC;IAC3E,IAAIF,IAAI,GAAG,IAAI,CAACG,eAAe,CAACD,OAAO,CAAC;IACxCF,IAAI,CAACI,aAAa,CAAC,IAAI,CAAC;IACxBJ,IAAI,CAACK,aAAa,CAACJ,IAAI,CAAC;IACxB,OAAOD,IAAS;EACjB;EAEAM,aAAaA,CAACL,IAAe;IAC5B,IAAIA,IAAI,YAAYjB,gBAAgB,EAAE;MACrC,OAAO,IAAI,CAACE,OAAO,CAACG,EAAE,KAAKY,IAAI,CAACM,UAAU,EAAE,CAAClB,EAAE;;IAEhD,OAAO,IAAI;EACZ;EAEAc,eAAeA,CAACD,OAAyC;IACxD,IAAIF,IAAI,GAAG,KAAK,CAACG,eAAe,EAAE;IAClC,IAAI,CAACH,IAAI,IAAIE,OAAO,EAAE;MACrB,OAAOA,OAAO,CAACM,aAAa,CAAC,EAAE,CAAC;;IAEjC,OAAOR,IAAI,IAAI,IAAIjB,gBAAgB,EAAE;EACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}