{"ast":null,"code":"import { AbstractDisplacementState } from '../core-state/AbstractDisplacementState';\nimport { SelectionLayerModel } from '../entities/selection/SelectionLayerModel';\nimport { Rectangle } from '@projectstorm/geometry';\nexport class SelectionBoxState extends AbstractDisplacementState {\n  constructor() {\n    super({\n      name: 'selection-box'\n    });\n  }\n  activated(previous) {\n    super.activated(previous);\n    this.layer = new SelectionLayerModel();\n    this.engine.getModel().addLayer(this.layer);\n  }\n  deactivated(next) {\n    super.deactivated(next);\n    this.layer.remove();\n    this.engine.repaintCanvas();\n  }\n  getBoxDimensions(event) {\n    let rel;\n    if ('touches' in event.event) {\n      const touch = event.event.touches[0];\n      rel = this.engine.getRelativePoint(touch.clientX, touch.clientY);\n    } else {\n      rel = this.engine.getRelativePoint(event.event.clientX, event.event.clientY);\n    }\n    return {\n      left: rel.x > this.initialXRelative ? this.initialXRelative : rel.x,\n      top: rel.y > this.initialYRelative ? this.initialYRelative : rel.y,\n      width: Math.abs(rel.x - this.initialXRelative),\n      height: Math.abs(rel.y - this.initialYRelative),\n      right: rel.x < this.initialXRelative ? this.initialXRelative : rel.x,\n      bottom: rel.y < this.initialYRelative ? this.initialYRelative : rel.y\n    };\n  }\n  fireMouseMoved(event) {\n    this.layer.setBox(this.getBoxDimensions(event));\n    const relative = this.engine.getRelativeMousePoint({\n      clientX: this.initialX,\n      clientY: this.initialY\n    });\n    if (event.virtualDisplacementX < 0) {\n      relative.x -= Math.abs(event.virtualDisplacementX);\n    }\n    if (event.virtualDisplacementY < 0) {\n      relative.y -= Math.abs(event.virtualDisplacementY);\n    }\n    const rect = Rectangle.fromPointAndSize(relative, Math.abs(event.virtualDisplacementX), Math.abs(event.virtualDisplacementY));\n    for (let model of this.engine.getModel().getSelectionEntities()) {\n      if (model.getBoundingBox) {\n        const bounds = model.getBoundingBox();\n        if (rect.containsPoint(bounds.getTopLeft()) && rect.containsPoint(bounds.getBottomRight())) {\n          model.setSelected(true);\n        } else {\n          model.setSelected(false);\n        }\n      }\n    }\n    this.engine.repaintCanvas();\n  }\n}","map":{"version":3,"names":["AbstractDisplacementState","SelectionLayerModel","Rectangle","SelectionBoxState","constructor","name","activated","previous","layer","engine","getModel","addLayer","deactivated","next","remove","repaintCanvas","getBoxDimensions","event","rel","touch","touches","getRelativePoint","clientX","clientY","left","x","initialXRelative","top","y","initialYRelative","width","Math","abs","height","right","bottom","fireMouseMoved","setBox","relative","getRelativeMousePoint","initialX","initialY","virtualDisplacementX","virtualDisplacementY","rect","fromPointAndSize","model","getSelectionEntities","getBoundingBox","bounds","containsPoint","getTopLeft","getBottomRight","setSelected"],"sources":["C:\\Users\\samir\\Diagram gen\\diagram-sami\\node_modules\\@projectstorm\\react-canvas-core\\src\\states\\SelectionBoxState.ts"],"sourcesContent":["import { AbstractDisplacementState, AbstractDisplacementStateEvent } from '../core-state/AbstractDisplacementState';\nimport { State } from '../core-state/State';\nimport { SelectionLayerModel } from '../entities/selection/SelectionLayerModel';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport { BasePositionModel } from '../core-models/BasePositionModel';\nimport { ModelGeometryInterface } from '../core/ModelGeometryInterface';\n\nexport interface SimpleClientRect {\n\tleft: number;\n\tright: number;\n\twidth: number;\n\theight: number;\n\ttop: number;\n\tbottom: number;\n}\n\nexport class SelectionBoxState extends AbstractDisplacementState {\n\tlayer: SelectionLayerModel;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'selection-box'\n\t\t});\n\t}\n\n\tactivated(previous: State) {\n\t\tsuper.activated(previous);\n\t\tthis.layer = new SelectionLayerModel();\n\t\tthis.engine.getModel().addLayer(this.layer);\n\t}\n\n\tdeactivated(next: State) {\n\t\tsuper.deactivated(next);\n\t\tthis.layer.remove();\n\t\tthis.engine.repaintCanvas();\n\t}\n\n\tgetBoxDimensions(event: AbstractDisplacementStateEvent): SimpleClientRect {\n\t\tlet rel: Point;\n\n\t\tif ('touches' in event.event) {\n\t\t\tconst touch = event.event.touches[0];\n\t\t\trel = this.engine.getRelativePoint(touch.clientX, touch.clientY);\n\t\t} else {\n\t\t\trel = this.engine.getRelativePoint(event.event.clientX, event.event.clientY);\n\t\t}\n\n\t\treturn {\n\t\t\tleft: rel.x > this.initialXRelative ? this.initialXRelative : rel.x,\n\t\t\ttop: rel.y > this.initialYRelative ? this.initialYRelative : rel.y,\n\t\t\twidth: Math.abs(rel.x - this.initialXRelative),\n\t\t\theight: Math.abs(rel.y - this.initialYRelative),\n\t\t\tright: rel.x < this.initialXRelative ? this.initialXRelative : rel.x,\n\t\t\tbottom: rel.y < this.initialYRelative ? this.initialYRelative : rel.y\n\t\t};\n\t}\n\n\tfireMouseMoved(event: AbstractDisplacementStateEvent) {\n\t\tthis.layer.setBox(this.getBoxDimensions(event));\n\n\t\tconst relative = this.engine.getRelativeMousePoint({\n\t\t\tclientX: this.initialX,\n\t\t\tclientY: this.initialY\n\t\t});\n\t\tif (event.virtualDisplacementX < 0) {\n\t\t\trelative.x -= Math.abs(event.virtualDisplacementX);\n\t\t}\n\t\tif (event.virtualDisplacementY < 0) {\n\t\t\trelative.y -= Math.abs(event.virtualDisplacementY);\n\t\t}\n\t\tconst rect = Rectangle.fromPointAndSize(\n\t\t\trelative,\n\t\t\tMath.abs(event.virtualDisplacementX),\n\t\t\tMath.abs(event.virtualDisplacementY)\n\t\t);\n\n\t\tfor (let model of this.engine.getModel().getSelectionEntities()) {\n\t\t\tif ((model as unknown as ModelGeometryInterface).getBoundingBox) {\n\t\t\t\tconst bounds = (model as unknown as ModelGeometryInterface).getBoundingBox();\n\t\t\t\tif (rect.containsPoint(bounds.getTopLeft()) && rect.containsPoint(bounds.getBottomRight())) {\n\t\t\t\t\tmodel.setSelected(true);\n\t\t\t\t} else {\n\t\t\t\t\tmodel.setSelected(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.engine.repaintCanvas();\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}